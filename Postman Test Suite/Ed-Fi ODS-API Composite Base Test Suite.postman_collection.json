{
	"info": {
		"_postman_id": "9ec29171-79f5-429e-8447-9a48e87f7f24",
		"name": "Ed-Fi ODS/API Composite Base Test Suite",
		"description": "Localhost integration testing using Postman Scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize Known Data",
			"item": [
				{
					"name": "Initialize Known School Ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81fbf7dd-240f-4cf7-ad3e-034fb9c1a35d",
								"exec": [
									"const __ = require('lodash');",
									"",
									"const schools = pm.response.json();",
									"",
									"const schoolIds = __.map(schools, school => school.schoolId);",
									"",
									"pm.environment.set(\"known:schoolIds\",schoolIds);",
									"",
									" ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/schools?localEducationAgencyId=255901",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"data",
								"v3",
								"ed-fi",
								"schools"
							],
							"query": [
								{
									"key": "localEducationAgencyId",
									"value": "255901"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Composites",
			"item": [
				{
					"name": "Feature: Composites support Get request patterns",
					"item": [
						{
							"name": "Initialize Known",
							"item": [
								{
									"name": "Initialize Known Staff Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0142dbca-686c-4402-8b8b-ad4834e81001",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"",
													"    pm.environment.set('known:staffUniqueId', __.first(responseItems)[\"staffUniqueId\"]);",
													"    pm.environment.set('known:staffId', __.first(responseItems)[\"id\"]);",
													"    pm.environment.set('known:birthDate', __.first(responseItems)[\"birthDate\"])",
													"    pm.environment.set('known:yearsOfPriorProfessionalExperience', __.first(responseItems)[\"yearsOfPriorProfessionalExperience\"])",
													"    pm.environment.set('known:hispanicLatinoEthnicity', __.first(responseItems)[\"hispanicLatinoEthnicity\"]);",
													"    pm.environment.set('known:staffLastSurname', __.first(responseItems)[\"lastSurname\"])",
													"    ",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Known Student Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "180bbe11-48c8-4a20-ae9c-3caa00219c88",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"  pm.environment.set('known:studentId', __.first(responseItems)[\"id\"]);",
													"  pm.environment.set('known:studentUniqueId', __.first(responseItems)[\"studentUniqueId\"]);",
													"  pm.environment.set('known:studentfirstName', __.first(responseItems)[\"firstName\"]);",
													"  pm.environment.set('known:studentlastSurname', __.first(responseItems)[\"lastSurname\"]);",
													"  pm.environment.set('known:studentIdFormattedGuid',getFormatedGuid(__.first(responseItems)[\"id\"]));",
													"    ",
													"function getFormatedGuid(str){",
													"return str.slice(0,8)+\"-\"+str.slice(8,12)+\"-\"+str.slice(12,16)+",
													"\"-\"+str.slice(16,20)+\"-\"+str.slice(20,str.length+1);",
													"}",
													"    ",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite GetById request uses an invalid resource identifier",
							"item": [
								{
									"name": "Not a GUID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f38abc1-1550-4a31-a781-5a0a3fe5541e",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating the supplied resource identifier is invalid.\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.message).to.equal(\"The supplied resource identifier is invalid.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cda6fcac-afe4-48af-8e33-7c3a9974c243",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds/notaguid",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds",
												"notaguid"
											]
										},
										"description": "Scenario Outline: Composite GetById request uses an invalid resource identifier\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite with a resource identifier of \"<id>\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"The supplied resource identifier is invalid.\"\r\n\r\n    Examples:\r\n    \r\n    | id                                  | comment                                                           |\r\n    | abc                                 | Not a GUID                                                        |\r\n    | XE736023-A4B6-42CE-9C3238A8520CD7D1 | Format is acceptable (hypens), but X is not a valid hex digit     |\r\n    | XE736023A4B642CE9C3238A8520CD7D1    | Format is acceptable (no hyphens), but X is not a valid hex digit |\r\n    | AE736023-A4B6-42CE9C3238A8520CD7D1  | Digits are valid, but format is invalid (missing hyphen)          |"
									},
									"response": []
								},
								{
									"name": "Formatted, contains invalid character",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bde17377-e9b8-49cf-9fb8-3148bceec278",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating the supplied resource identifier is invalid.\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.message).to.equal(\"The supplied resource identifier is invalid.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b4c76ed-4149-4bde-8ea6-c80b66656bde",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "bearer {{odsapi:access_token}}"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds/XAAAAAAA-6666-7777-8888-FFFFFFFFFFFF",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds",
												"XAAAAAAA-6666-7777-8888-FFFFFFFFFFFF"
											]
										},
										"description": "Scenario Outline: Composite GetById request uses an invalid resource identifier\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite with a resource identifier of \"<id>\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"The supplied resource identifier is invalid.\"\r\n\r\n    Examples:\r\n    \r\n    | id                                  | comment                                                           |\r\n    | abc                                 | Not a GUID                                                        |\r\n    | XE736023-A4B6-42CE-9C3238A8520CD7D1 | Format is acceptable (hypens), but X is not a valid hex digit     |\r\n    | XE736023A4B642CE9C3238A8520CD7D1    | Format is acceptable (no hyphens), but X is not a valid hex digit |\r\n    | AE736023-A4B6-42CE9C3238A8520CD7D1  | Digits are valid, but format is invalid (missing hyphen)          |"
									},
									"response": []
								},
								{
									"name": "Non-formatted, contains invalid character",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "618394f7-b3de-4b95-9959-3b506431f1c6",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating the supplied resource identifier is invalid.\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.message).to.equal(\"The supplied resource identifier is invalid.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "84a9d511-f24d-4364-ae0f-add6645e3ece",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds/XAAAAAAA666677778888FFFFFFFFFFFF",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds",
												"XAAAAAAA666677778888FFFFFFFFFFFF"
											]
										},
										"description": "Scenario Outline: Composite GetById request uses an invalid resource identifier\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite with a resource identifier of \"<id>\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"The supplied resource identifier is invalid.\"\r\n\r\n    Examples:\r\n    \r\n    | id                                  | comment                                                           |\r\n    | abc                                 | Not a GUID                                                        |\r\n    | XE736023-A4B6-42CE-9C3238A8520CD7D1 | Format is acceptable (hypens), but X is not a valid hex digit     |\r\n    | XE736023A4B642CE9C3238A8520CD7D1    | Format is acceptable (no hyphens), but X is not a valid hex digit |\r\n    | AE736023-A4B6-42CE9C3238A8520CD7D1  | Digits are valid, but format is invalid (missing hyphen)          |"
									},
									"response": []
								},
								{
									"name": "Invalid format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a0dc66f-914f-4cd5-bd5c-d5638113bbdf",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating the supplied resource identifier is invalid.\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.message).to.include(\"The supplied resource identifier is invalid.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d5a82043-2afd-48f5-a12d-0276d343d3b8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds/AAAAAAAA-6666-77778888-FFFFFFFFFFFF",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds",
												"AAAAAAAA-6666-77778888-FFFFFFFFFFFF"
											]
										},
										"description": "Scenario Outline: Composite GetById request uses an invalid resource identifier\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite with a resource identifier of \"<id>\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"The supplied resource identifier is invalid.\"\r\n\r\n    Examples:\r\n    \r\n    | id                                  | comment                                                           |\r\n    | abc                                 | Not a GUID                                                        |\r\n    | XE736023-A4B6-42CE-9C3238A8520CD7D1 | Format is acceptable (hypens), but X is not a valid hex digit     |\r\n    | XE736023A4B642CE9C3238A8520CD7D1    | Format is acceptable (no hyphens), but X is not a valid hex digit |\r\n    | AE736023-A4B6-42CE9C3238A8520CD7D1  | Digits are valid, but format is invalid (missing hyphen)          |"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite GetById request uses a valid resource identifier",
							"item": [
								{
									"name": "Non formatted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64123eda-8a37-46b2-8255-ecaab12cb2d9",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return the student matching the requested id\", () => {",
													"     const responseItem = pm.response.json();",
													"     pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:studentId\"));",
													"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get(\"known:studentUniqueId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f2f7cfa-5cd7-4949-a8f1-8228f13f5761",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "bearer {{odsapi:access_token}}"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds/{{known:studentId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds",
												"{{known:studentId}}"
											]
										},
										"description": "Scenario Outline: Composite GetById request uses an invalid resource identifier\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite with a resource identifier of \"<id>\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"The supplied resource identifier is invalid.\"\r\n\r\n    Examples:\r\n    \r\n    | id                                  | comment                                                           |\r\n    | abc                                 | Not a GUID                                                        |\r\n    | XE736023-A4B6-42CE-9C3238A8520CD7D1 | Format is acceptable (hypens), but X is not a valid hex digit     |\r\n    | XE736023A4B642CE9C3238A8520CD7D1    | Format is acceptable (no hyphens), but X is not a valid hex digit |\r\n    | AE736023-A4B6-42CE9C3238A8520CD7D1  | Digits are valid, but format is invalid (missing hyphen)          |"
									},
									"response": []
								},
								{
									"name": "Formatted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "734236c5-0ec2-4ca1-b6b7-1d7d2204b6ce",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return the student matching the requested id\", () => {",
													"     const responseItem = pm.response.json();",
													"     pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:studentId\"));",
													"     pm.expect(responseItem.studentUniqueId).to.equal(pm.environment.get(\"known:studentUniqueId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dca6c7c5-15b8-4205-9a66-c79eba42a47c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "bearer {{odsapi:access_token}}"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds/{{known:studentIdFormattedGuid}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds",
												"{{known:studentIdFormattedGuid}}"
											]
										},
										"description": "Scenario Outline: Composite GetById request uses an invalid resource identifier\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite with a resource identifier of \"<id>\"\r\n    Then the response should contain a 400 Bad Request failure indicating that \"The supplied resource identifier is invalid.\"\r\n\r\n    Examples:\r\n    \r\n    | id                                  | comment                                                           |\r\n    | abc                                 | Not a GUID                                                        |\r\n    | XE736023-A4B6-42CE-9C3238A8520CD7D1 | Format is acceptable (hypens), but X is not a valid hex digit     |\r\n    | XE736023A4B642CE9C3238A8520CD7D1    | Format is acceptable (no hyphens), but X is not a valid hex digit |\r\n    | AE736023-A4B6-42CE9C3238A8520CD7D1  | Digits are valid, but format is invalid (missing hyphen)          |"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites support GetAll pattern requests",
							"item": [
								{
									"name": "GetAll pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06b6aa15-cd14-4747-aa11-0929a569e097",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return all the members included by the composite definition on each item\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"     /*",
													"      <Composite name=\"StaffFilter\">",
													"        <BaseResource name=\"Staff\">",
													"          <Property name=\"HispanicLatinoEthnicity\" />",
													"          <Property name=\"YearsOfPriorProfessionalExperience\" />",
													"          <Property name=\"LastSurname\" />",
													"          <Property name=\"Id\" />",
													"        </BaseResource>",
													"      </Composite>",
													"      */",
													"     ",
													"     responseItems.forEach(staff => {",
													"         // Make sure each item has some properties",
													"         pm.expect(Object.keys(staff)).to.have.members(['id', 'lastSurname', 'hispanicLatinoEthnicity', 'yearsOfPriorProfessionalExperience']);",
													"    });",
													"});",
													"",
													" "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b008ced-f479-414e-80d3-1321a6b20687",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											]
										},
										"description": "Scenario: Composites support GetAll pattern requests\r\n    Given the subject of the request is \"Staff\"\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite\r\n    Then the response model should only contain the records with exact matches by id"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites support GetById pattern requests",
							"item": [
								{
									"name": "GetById pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f21e3ce3-ffea-40d1-ad57-819a658cc567",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the resource matching the requested id\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:staffId\"));",
													"    pm.expect(responseItem.staffUniqueId).to.equal(pm.environment.get(\"known:staffUniqueId\"));",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e3e5fb8-e293-407a-b98a-84747e7ed077",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/Staffs/{{known:staffId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"Staffs",
												"{{known:staffId}}"
											]
										},
										"description": "Scenario: Composites support GetById pattern requests\r\n    Given the subject of the request is a student with a StudentSchoolAssociation\r\n    When a GET (by id) request is submitted to the \"StudentById\" composite\r\n    Then the response model should return a record matching by id"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": " Composites support GetByKey pattern requests",
							"item": [
								{
									"name": "GetByKey pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9f4cca3-e8a3-4ae4-80b4-500009fe2b00",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return the item requested by key\", () => {",
													"    // TODO: Per ODS-3609 (https://tracker.ed-fi.org/browse/ODS-3609), this response should be a single-item array",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:staffId\"));",
													"    pm.expect(responseItem.staffUniqueId).to.equal(pm.environment.get(\"known:staffUniqueId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51f13a3f-b483-4534-a4ba-a04a5c14c639",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "bearer {{odsapi:access_token}}"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffWithUniqueIds?StaffUniqueId={{known:staffUniqueId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffWithUniqueIds"
											],
											"query": [
												{
													"key": "StaffUniqueId",
													"value": "{{known:staffUniqueId}}"
												}
											]
										},
										"description": "Scenario: Composites support GetByKey pattern requests\r\n    Given the subject of the request is \"Staff\" where\r\n    | ParameterName | Value  | Type |\r\n    | StaffUniqueId | 207288 | Key  |    \r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite with the query string filter\r\n    Then the response model should only contain the records with exact matches by id"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites support GetByExample pattern requests",
							"item": [
								{
									"name": "GetByExample pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28883de3-e99e-4a5e-b860-7498588952c6",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only contain resources matching the supplied criteria\", () => {",
													"    const responseItems = pm.response.json();",
													"",
													"     _.each(responseItems, (responseItem) => {",
													"         const suppliedPrefix = pm.variables.get(\"supplied:personalTitlePrefix\");",
													"         const suppliedEthnicity = pm.variables.get(\"supplied:hispanicLatinoEthnicity\");",
													"         ",
													"        pm.expect(responseItem.personalTitlePrefix).to.equal(suppliedPrefix);",
													"        pm.expect(responseItem.hispanicLatinoEthnicity).to.equal(suppliedEthnicity);",
													"     });",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73cf90ed-7906-43e3-8c5c-7745f260a546",
												"exec": [
													"pm.variables.set(\"supplied:personalTitlePrefix\", \"Mrs\");",
													"pm.variables.set(\"supplied:hispanicLatinoEthnicity\", true);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/Staffs?PersonalTitlePrefix={{supplied:personalTitlePrefix}}&hispanicLatinoEthnicity={{supplied:hispanicLatinoEthnicity}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"Staffs"
											],
											"query": [
												{
													"key": "PersonalTitlePrefix",
													"value": "{{supplied:personalTitlePrefix}}"
												},
												{
													"key": "hispanicLatinoEthnicity",
													"value": "{{supplied:hispanicLatinoEthnicity}}"
												}
											]
										},
										"description": "Scenario: Composites support GetByExample pattern requests\r\n    Given the subject of the request is \"Student\" where\r\n    | ParameterName        | Value | Type        |\r\n    | PersonalTitlePrefix  | Mr    | TitlePrefix |\r\n    | GenerationCodeSuffix | Jr    | CodeSuffix  |\r\n    When a GET (all) request is submitted to the \"StudentByExample\" composite with the query string filter\r\n    Then the response model should only contain the records with exact matches by id"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7b3cce9-a22b-457c-b37d-0a1d3255afaa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55305487-4786-49c0-b958-69c4c416727b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature: Composite requests support URL-based range criteria",
					"item": [
						{
							"name": "Initialize Known Data",
							"item": [
								{
									"name": "Initialize Known Staff Data for Range Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38c50030-7dd2-4561-bbc4-3619d28eecb5",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"const staffList = __.map(responseItems, staff => ",
													"    {",
													"        return { ",
													"            staffUniqueId: staff.staffUniqueId, ",
													"            birthDate: staff.birthDate,",
													"            yearsOfPriorProfessionalExperience: staff.yearsOfPriorProfessionalExperience",
													"        };",
													"    });",
													"",
													"const staffListOrderedByBirthDate = __.orderBy(staffList, ['birthDate']);",
													"const staffListOrderedByExperience = __.orderBy(staffList, ['yearsOfPriorProfessionalExperience']);",
													"",
													"pm.environment.set(\"known:staffListOrderedByBirthDate\", staffListOrderedByBirthDate);",
													"pm.environment.set(\"known:staffListOrderedByExperience\", staffListOrderedByExperience);",
													"",
													"console.log(\"By birthdate:\" + JSON.stringify(staffListOrderedByBirthDate));",
													"console.log(\"By experience:\" + JSON.stringify(staffListOrderedByExperience));",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Known Session Data for Range Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7420b590-f09a-485c-a5cd-5800f723bfee",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"const sessionList = __.map(responseItems, session => ",
													"    {",
													"        return { ",
													"            beginDate: session.beginDate, ",
													"            endDate: session.endDate",
													"        };",
													"    });",
													"",
													"const sessionListOrderedByBeginDate = __.orderBy(sessionList, ['beginDate']);",
													"const sessionListOrderedByEndDate = __.orderBy(sessionList, ['endDate']);",
													"",
													"pm.environment.set(\"known:sessionListOrderedByBeginDate\", sessionListOrderedByBeginDate);",
													"pm.environment.set(\"known:sessionListOrderedByEndDate\", sessionListOrderedByEndDate);",
													"",
													"console.log(\"By beginDate:\" + JSON.stringify(sessionListOrderedByBeginDate));",
													"console.log(\"By endDate:\" + JSON.stringify(sessionListOrderedByEndDate));",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Date Range Scenarios",
							"item": [
								{
									"name": "Request filters using a date range inclusive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9961fbc5-f605-4955-9ef1-91191850c3a8",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    // TODO: Per ODS-3610 (https://tracker.ed-fi.org/browse/ODS-3610), pure dates should not be returned by the Composites API with the time portion, and so eventually this function should be removed.",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return staff with birth dates in the supplied range\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    __.each(responseItems, staff => {",
													"        // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // For now we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBirthDate = new Date(stripTimeFromDate(staff.birthDate));",
													"        const suppliedMinBirthDate = new Date(pm.variables.get(\"supplied:minBirthDate\"));",
													"        const suppliedMaxBirthDate = new Date(pm.variables.get(\"supplied:maxBirthDate\"));",
													"        ",
													"       // Make sure the birth date is >= the minimum or <= the maximum",
													"       pm.expect(actualBirthDate).to.be.at.least(suppliedMinBirthDate);",
													"       pm.expect(actualBirthDate).to.be.at.most(suppliedMaxBirthDate);",
													"    });  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c88f587f-fc64-4c2f-8482-fa7db0803c3a",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known birth date",
													"const minBirthDate = pm.environment.get(\"known:staffListOrderedByBirthDate\")[0].birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBirthDate\", minBirthDate);",
													"",
													"// Get the next larger birth date as the max (skipping any birth dates that happen to be the same)",
													"const maxBirthDate = __.dropWhile(pm.environment.get(\"known:staffListOrderedByBirthDate\"), ",
													"    staff => staff.birthDate === minBirthDate).first().birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBirthDate\", maxBirthDate);",
													"",
													"console.log(\"minBirthDate:\" + minBirthDate);",
													"console.log(\"maxBirthDate:\" + maxBirthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffByRange?q=BirthDate:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] ",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffByRange"
											],
											"query": [
												{
													"key": "q",
													"value": "BirthDate:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] "
												}
											]
										},
										"description": "Scenario: Request filters using a date range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BirthDate    | 1966-06-24 | 1985-09-04 | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters using a date range inclusive with camel cased parameter name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11229612-054f-40c1-b094-6230afa70fe3",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return staff with birth dates in the supplied range\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    __.each(responseItems, staff => {",
													"        // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBirthDate = new Date(stripTimeFromDate(staff.birthDate));",
													"        const suppliedMinBirthDate = new Date(pm.variables.get(\"supplied:minBirthDate\"));",
													"        const suppliedMaxBirthDate = new Date(pm.variables.get(\"supplied:maxBirthDate\"));",
													"        ",
													"       // Make sure the birth date is >= the minimum or <= the maximum",
													"       pm.expect(actualBirthDate).to.be.at.least(suppliedMinBirthDate);",
													"       pm.expect(actualBirthDate).to.be.at.most(suppliedMaxBirthDate);",
													"    });  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a5f2d234-108a-4858-b093-274b8d9457b0",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known birth date",
													"const minBirthDate = pm.environment.get(\"known:staffListOrderedByBirthDate\")[0].birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBirthDate\", minBirthDate);",
													"",
													"// Get the next larger birth date as the max (skipping any birth dates that happen to be the same)",
													"const maxBirthDate = __.dropWhile(pm.environment.get(\"known:staffListOrderedByBirthDate\"), ",
													"    staff => staff.birthDate === minBirthDate).first().birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBirthDate\", maxBirthDate);",
													"",
													"console.log(\"minBirthDate:\" + minBirthDate);",
													"console.log(\"maxBirthDate:\" + maxBirthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffByRange?q=BiRtHdAtE:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] ",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffByRange"
											],
											"query": [
												{
													"key": "q",
													"value": "BiRtHdAtE:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] "
												}
											]
										},
										"description": "Scenario: Request filters using a date range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BirthDate    | 1966-06-24 | 1985-09-04 | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters using a date range min exclusive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6d3f91a-791d-49b1-86cc-4e7cba982c88",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return staff with birth dates in the supplied range\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    __.each(responseItems, staff => {",
													"        // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBirthDate = new Date(stripTimeFromDate(staff.birthDate));",
													"        const suppliedMinBirthDate = new Date(pm.variables.get(\"supplied:minBirthDate\"));",
													"        const suppliedMaxBirthDate = new Date(pm.variables.get(\"supplied:maxBirthDate\"));",
													"        ",
													"       // Make sure the birth date is > the minimum and <= the maximum",
													"       pm.expect(actualBirthDate).to.be.greaterThan(suppliedMinBirthDate);",
													"       pm.expect(actualBirthDate).to.be.at.most(suppliedMaxBirthDate);",
													"    });  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5582cd27-3694-40e5-8c8a-df133d116888",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known birth date",
													"const minBirthDate = pm.environment.get(\"known:staffListOrderedByBirthDate\")[0].birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBirthDate\", minBirthDate);",
													"",
													"// Get the next larger birth date as the max (skipping any birth dates that happen to be the same)",
													"const maxBirthDate = __.dropWhile(pm.environment.get(\"known:staffListOrderedByBirthDate\"), ",
													"    staff => staff.birthDate === minBirthDate).first().birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBirthDate\", maxBirthDate);",
													"",
													"console.log(\"minBirthDate:\" + minBirthDate);",
													"console.log(\"maxBirthDate:\" + maxBirthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffByRange?q=BirthDate:{{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] ",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffByRange"
											],
											"query": [
												{
													"key": "q",
													"value": "BirthDate:{{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] "
												}
											]
										},
										"description": "Scenario: Request filters using a date range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BirthDate    | 1966-06-24 | 1985-09-04 | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters using a date range max exclusive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c7ad43a-d086-4271-bf43-3d48584a3693",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return staff with birth dates in the supplied range\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    __.each(responseItems, staff => {",
													"        // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBirthDate = new Date(stripTimeFromDate(staff.birthDate));",
													"        const suppliedMinBirthDate = new Date(pm.variables.get(\"supplied:minBirthDate\"));",
													"        const suppliedMaxBirthDate = new Date(pm.variables.get(\"supplied:maxBirthDate\"));",
													"        ",
													"       // Make sure the birth date is >= the minimum and < the maximum",
													"       pm.expect(actualBirthDate).to.be.at.least(suppliedMinBirthDate);",
													"       pm.expect(actualBirthDate).to.be.lessThan(suppliedMaxBirthDate);",
													"    });  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac05e4f7-1618-4d08-a179-2a8a825d54f3",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known birth date",
													"const minBirthDate = pm.environment.get(\"known:staffListOrderedByBirthDate\")[0].birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBirthDate\", minBirthDate);",
													"",
													"// Get the next larger birth date as the max (skipping any birth dates that happen to be the same)",
													"const maxBirthDate = __.dropWhile(pm.environment.get(\"known:staffListOrderedByBirthDate\"), ",
													"    staff => staff.birthDate === minBirthDate).first().birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBirthDate\", maxBirthDate);",
													"",
													"console.log(\"minBirthDate:\" + minBirthDate);",
													"console.log(\"maxBirthDate:\" + maxBirthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffByRange?q=BirthDate:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffByRange"
											],
											"query": [
												{
													"key": "q",
													"value": "BirthDate:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}}"
												}
											]
										},
										"description": "Scenario: Request filters using a date range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BirthDate    | 1966-06-24 | 1985-09-04 | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters using a date range min and max exclusive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22df194a-0e7e-40da-a0d3-f3626b3424c2",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return staff with birth dates in the supplied range\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    __.each(responseItems, staff => {",
													"        // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBirthDate = new Date(stripTimeFromDate(staff.birthDate));",
													"        const suppliedMinBirthDate = new Date(pm.variables.get(\"supplied:minBirthDate\"));",
													"        const suppliedMaxBirthDate = new Date(pm.variables.get(\"supplied:maxBirthDate\"));",
													"        ",
													"       // Make sure the birth date is > the minimum and < the maximum",
													"       pm.expect(actualBirthDate).to.be.greaterThan(suppliedMinBirthDate);",
													"       pm.expect(actualBirthDate).to.be.lessThan(suppliedMaxBirthDate);",
													"    });  ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dfc49255-d381-48c5-b17a-e86ffdff4642",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known birth date",
													"const minBirthDate = pm.environment.get(\"known:staffListOrderedByBirthDate\")[0].birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBirthDate\", minBirthDate);",
													"",
													"// Get the largest known birth date as the max",
													"const maxBirthDate = __.last(pm.environment.get(\"known:staffListOrderedByBirthDate\")).birthDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBirthDate\", maxBirthDate);",
													"",
													"console.log(\"minBirthDate:\" + minBirthDate);",
													"console.log(\"maxBirthDate:\" + maxBirthDate);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffByRange?q=BirthDate:{{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}} ",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffByRange"
											],
											"query": [
												{
													"key": "q",
													"value": "BirthDate:{{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}} "
												}
											]
										},
										"description": "Scenario: Request filters using a date range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BirthDate    | 1966-06-24 | 1985-09-04 | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters on multiple date ranges",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbcd0adf-c4f7-4bf7-9cad-70526e2766a5",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only contain resources matching all the supplied criteria\", () => {",
													"     const responseItems = pm.response.json();",
													"",
													"     __.each(responseItems, staff =>  {",
													"         ",
													"          // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBeginDate = new Date(stripTimeFromDate(staff.beginDate));",
													"        const suppliedMinBeginDate = new Date(pm.variables.get(\"supplied:minBeginDate\"));",
													"        const suppliedMaxBeginDate = new Date(pm.variables.get(\"supplied:maxBeginDate\"));",
													"        ",
													"       // Make sure the begin date is >= the minimum or <= the maximum",
													"       pm.expect(actualBeginDate).to.be.at.least(suppliedMinBeginDate);",
													"       pm.expect(actualBeginDate).to.be.at.most(suppliedMaxBeginDate);",
													"       ",
													"       ",
													"          // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualEndDate = new Date(stripTimeFromDate(staff.endDate));",
													"        const suppliedMinEndDate = new Date(pm.variables.get(\"supplied:minEndDate\"));",
													"        const suppliedMaxEndDate = new Date(pm.variables.get(\"supplied:maxEndDate\"));",
													"        ",
													"       // Make sure the end date is >= the minimum or <= the maximum",
													"       pm.expect(actualEndDate).to.be.at.least(suppliedMinEndDate);",
													"       pm.expect(actualEndDate).to.be.at.most(suppliedMaxEndDate);",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "374ee9cd-fc88-449a-8515-720d343af3c7",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known begin date",
													"const minBeginDate = pm.environment.get(\"known:sessionListOrderedByBeginDate\")[0].beginDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBeginDate\", minBeginDate);",
													"",
													"// Get the next larger begin date as the max (skipping any begin dates that happen to be the same)",
													"const maxBeginDate = __.dropWhile(pm.environment.get(\"known:sessionListOrderedByBeginDate\"), ",
													"    staff => staff.beginDate === minBeginDate).first().beginDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBeginDate\", maxBeginDate);",
													"",
													"",
													"// Establish a minimum date range using the smallest known end date",
													"const minEndDate = pm.environment.get(\"known:sessionListOrderedByEndDate\")[0].endDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minEndDate\", minEndDate);",
													"",
													"// Get the next larger begin date as the max (skipping any begin dates that happen to be the same)",
													"const maxEndDate = __.dropWhile(pm.environment.get(\"known:sessionListOrderedByEndDate\"), ",
													"    staff => staff.endDate === minEndDate).first().endDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxEndDate\", maxEndDate);",
													"",
													"",
													"console.log(\"minBeginDate:\" + minBeginDate);",
													"console.log(\"maxBeginDate:\" + maxBeginDate);",
													"console.log(\"minEndDate:\" + minEndDate);",
													"console.log(\"maxEndDate:\" + maxEndDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionByRanges?q=BeginDate:[{{supplied:minBeginDate}}..{{supplied:maxBeginDate}}] ,EndDate:[{{supplied:minEndDate}}..{{supplied:maxEndDate}}]",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SessionByRanges"
											],
											"query": [
												{
													"key": "q",
													"value": "BeginDate:[{{supplied:minBeginDate}}..{{supplied:maxBeginDate}}] ,EndDate:[{{supplied:minEndDate}}..{{supplied:maxEndDate}}]"
												}
											]
										},
										"description": "Scenario: Request filters on multiple date ranges\r\n     Given the subject of the request is \"Session\" with range\r\n     | PropertyName | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BeginDate    | 2010-08-23 | 2011-01-04 | >=             | <            |\r\n     | EndDate      | 05.23.2010 | 05.27.2011 | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"SessionByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters using a non-existing property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18f54954-c885-4997-87bc-d2554094db49",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating the property does not exist or is not available string\", () => {",
													"     const responseItem = pm.response.json();",
													"     pm.expect(responseItem.message).to.include(\"The property \\'NonExistingDate\\' does not exist or is not available\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7839c7d-eb9f-48dc-8f43-346f925e5632",
												"exec": [
													"const __ = require('lodash');",
													"",
													"// Establish a minimum date range using the smallest known begin date",
													"const minBeginDate = pm.environment.get(\"known:sessionListOrderedByBeginDate\")[0].beginDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minBeginDate\", minBeginDate);",
													"",
													"// Get the next larger begin date as the max (skipping any begin dates that happen to be the same)",
													"const maxBeginDate = __.dropWhile(pm.environment.get(\"known:sessionListOrderedByBeginDate\"), ",
													"    staff => staff.beginDate === minBeginDate).first().beginDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxBeginDate\", maxBeginDate);",
													"",
													"",
													"// Establish a minimum date range using the smallest known end date",
													"const minEndDate = pm.environment.get(\"known:sessionListOrderedByEndDate\")[0].endDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:minEndDate\", minEndDate);",
													"",
													"// Get the next larger begin date as the max (skipping any begin dates that happen to be the same)",
													"const maxEndDate = __.dropWhile(pm.environment.get(\"known:sessionListOrderedByEndDate\"), ",
													"    staff => staff.endDate === minEndDate).first().endDate;",
													"",
													"// Save the value for this scenario only",
													"pm.variables.set(\"supplied:maxEndDate\", maxEndDate);",
													"",
													"",
													"console.log(\"minBeginDate:\" + minBeginDate);",
													"console.log(\"maxBeginDate:\" + maxBeginDate);",
													"console.log(\"minEndDate:\" + minEndDate);",
													"console.log(\"maxEndDate:\" + maxEndDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionByRanges?q=BeginDate:[{{supplied:minBeginDate}}..{{supplied:maxBeginDate}}] ,EndDate:[{{supplied:minEndDate}}..{{supplied:maxEndDate}}],NonExistingDate:[{{supplied:minEndDate}}..{{supplied:maxEndDate}}]",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SessionByRanges"
											],
											"query": [
												{
													"key": "q",
													"value": "BeginDate:[{{supplied:minBeginDate}}..{{supplied:maxBeginDate}}] ,EndDate:[{{supplied:minEndDate}}..{{supplied:maxEndDate}}],NonExistingDate:[{{supplied:minEndDate}}..{{supplied:maxEndDate}}]"
												}
											]
										},
										"description": "Scenario: Request filters using a non-existing property\r\n     Given the subject of the request is \"Session\" with range\r\n     | PropertyName    | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | BeginDate       | 2010-08-23 | 2011-01-04 | >=             | <            |\r\n     | EndDate         | 05.23.2010 | 05.27.2011 | >              | <=           |\r\n     | NonExistingDate | 05.23.2010 | 05.27.2011 | >              | <            |\r\n     When a GET (all) request is submitted to the \"SessionByRange\" composite with a range query\r\n     Then the response should be a \"400\" with message \"The property 'NonExistingDate' does not exist or is not available.\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Numeric Range Scenarios",
							"item": [
								{
									"name": "Request filters using a numeric range",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a971631-d798-47c5-a4e1-29b6caf213bf",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"const minYearsOfExperience = \r",
													"    __.first(pm.environment.get(\"known:staffListOrderedByExperience\"))\r",
													"        .yearsOfPriorProfessionalExperience;\r",
													"    \r",
													"pm.variables.set(\"supplied:minYearsOfExperience\", minYearsOfExperience);\r",
													"\r",
													"const maxYearsOfExperience =\r",
													"    __.last(pm.environment.get(\"known:staffListOrderedByExperience\"))\r",
													"        .yearsOfPriorProfessionalExperience\r",
													"\r",
													"pm.variables.set(\"supplied:maxYearsOfExperience\", maxYearsOfExperience);\r",
													"\r",
													"console.log(\"minYearsOfExperience:\" + minYearsOfExperience);\r",
													"console.log(\"maxYearsOfExperience:\" + maxYearsOfExperience);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0970e906-ff6f-4592-a267-03816aa8fb94",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only contain resources with values within the supplied range\", () => {",
													"     const responseItems = pm.response.json();",
													"",
													"     __.each(responseItems, staff =>  {",
													"        const suppliedMinExperience = pm.variables.get(\"supplied:minYearsOfExperience\");",
													"        const suppliedMaxExperience = pm.variables.get(\"supplied:maxYearsOfExperience\");",
													"        ",
													"        pm.expect(staff.yearsOfPriorProfessionalExperience).is.at.least(suppliedMinExperience);",
													"        pm.expect(staff.yearsOfPriorProfessionalExperience).is.at.most(suppliedMaxExperience);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?q=YearsOfPriorProfessionalExperience:[{{supplied:minYearsOfExperience}}..{{supplied:maxYearsOfExperience}}]",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "q",
													"value": "YearsOfPriorProfessionalExperience:[{{supplied:minYearsOfExperience}}..{{supplied:maxYearsOfExperience}}]"
												}
											]
										},
										"description": "Scenario: Request filters using a numeric range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName                       | BeginValue | EndValue | BeginInclusion | EndInclusion |\r\n     | YearsOfPriorProfessionalExperience | 25.00      | 27.00    | >=             | <=           |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								},
								{
									"name": "Request filters using both a numeric and date range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcac68a1-2ba3-4438-938f-41e5b0d924a4",
												"exec": [
													"const __ = require('lodash');",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}",
													"",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only contain resources matching all the supplied criteria\", () => {",
													"     const responseItems = pm.response.json();",
													"",
													"     __.each(responseItems, staff =>  {",
													"        // NOTE: Composite API is serializing dates with time portions -- this is technically incorrect",
													"        // so we need to strip the times before comparing to avoid time zone madness.",
													"        const actualBirthDate = new Date(stripTimeFromDate(staff.birthDate));",
													"        const suppliedMinBirthDate = new Date(pm.variables.get(\"supplied:minBirthDate\"));",
													"        const suppliedMaxBirthDate = new Date(pm.variables.get(\"supplied:maxBirthDate\"));",
													"        ",
													"        // Make sure the birth date is >= the minimum or <= the maximum",
													"        pm.expect(actualBirthDate).to.be.at.least(suppliedMinBirthDate);",
													"        pm.expect(actualBirthDate).to.be.at.most(suppliedMaxBirthDate);",
													"        ",
													"        const suppliedMinExperience = pm.variables.get(\"supplied:minYearsOfExperience\");",
													"        const suppliedMaxExperience = pm.variables.get(\"supplied:maxYearsOfExperience\");",
													"        ",
													"        pm.expect(staff.yearsOfPriorProfessionalExperience).is.at.least(suppliedMinExperience);",
													"        pm.expect(staff.yearsOfPriorProfessionalExperience).is.at.most(suppliedMaxExperience);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d5ab123d-3542-4c8c-b1e5-dbae759c8166",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"// Establish a minimum date range using the smallest known birth date\r",
													"const minBirthDate = pm.environment.get(\"known:staffListOrderedByBirthDate\")[0].birthDate;\r",
													"\r",
													"// Save the value for this scenario only\r",
													"pm.variables.set(\"supplied:minBirthDate\", minBirthDate);\r",
													"\r",
													"// Get the next larger birth date as the max (skipping any birth dates that happen to be the same)\r",
													"const maxBirthDate = __.dropWhile(pm.environment.get(\"known:staffListOrderedByBirthDate\"), \r",
													"    staff => staff.birthDate === minBirthDate).first().birthDate;\r",
													"\r",
													"// Save the value for this scenario only\r",
													"pm.variables.set(\"supplied:maxBirthDate\", maxBirthDate);\r",
													"\r",
													"\r",
													"const minYearsOfExperience = pm.environment.get(\"known:staffListOrderedByExperience\")[0].yearsOfPriorProfessionalExperience;\r",
													"pm.variables.set(\"supplied:minYearsOfExperience\", minYearsOfExperience);\r",
													"\r",
													"const maxYearsOfExperience =__.last(pm.environment.get(\"known:staffListOrderedByExperience\"))[\"yearsOfPriorProfessionalExperience\"]\r",
													"\r",
													"pm.variables.set(\"supplied:maxYearsOfExperience\", maxYearsOfExperience);\r",
													"     \r",
													"     \r",
													"console.log(\"minBirthDate:\" + minBirthDate);\r",
													"console.log(\"maxBirthDate:\" + maxBirthDate);\r",
													"console.log(\"minYearsOfExperience:\" + minYearsOfExperience);\r",
													"console.log(\"maxYearsOfExperience:\" + maxYearsOfExperience);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "bearer {{odsapi:access_token}}"
											}
										],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffByRange?q=Birthdate:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] ,YearsOfPriorProfessionalExperience:[{{supplied:minYearsOfExperience}}..{{supplied:maxYearsOfExperience}}]",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffByRange"
											],
											"query": [
												{
													"key": "q",
													"value": "Birthdate:[{{supplied:minBirthDate}}..{{supplied:maxBirthDate}}] ,YearsOfPriorProfessionalExperience:[{{supplied:minYearsOfExperience}}..{{supplied:maxYearsOfExperience}}]"
												}
											]
										},
										"description": "Scenario: Request filters using both a numeric and date range\r\n     Given the subject of the request is \"Staff\" with range\r\n     | PropertyName                       | BeginValue | EndValue   | BeginInclusion | EndInclusion |\r\n     | YearsOfPriorProfessionalExperience | 25.00      | 27.00      | >=             | <=           |\r\n     | BirthDate                          | 1966-06-24 | 1985-09-04 | >              | <            |\r\n     When a GET (all) request is submitted to the \"StaffByRange\" composite with a range query\r\n     Then the response model should contain correct records with values within the specified criteria"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature: Composites support URL based pagination",
					"item": [
						{
							"name": "Initialize Known Data",
							"item": [
								{
									"name": "Initialize Known Student Data for Paging Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8f422f8-733f-49d0-a34e-eef972cb4a2a",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"/*",
													"    pm.environment.set('known:staffUniqueId', __.last(responseItems)[\"staffUniqueId\"]);",
													"    pm.environment.set('known:staffId', __.last(responseItems)[\"id\"]);",
													"    pm.environment.set('known:birthDate', __.last(responseItems)[\"birthDate\"])",
													"    pm.environment.set('known:yearsOfPriorProfessionalExperience', __.last(responseItems)[\"yearsOfPriorProfessionalExperience\"])",
													"    pm.environment.set('known:hispanicLatinoEthnicity', __.last(responseItems)[\"hispanicLatinoEthnicity\"]);",
													"    pm.environment.set('known:staffLastSurname', __.last(responseItems)[\"lastSurname\"]);",
													"",
													"",
													"const lastSurnameList = __.map(responseItems, staff => staff.lastSurname);",
													"pm.environment.set(\"known:lastSurnameList\", lastSurnameList);",
													"*/",
													"  ",
													"const studentUniqueIdList = __.map(responseItems, staff => staff.studentUniqueId);",
													"pm.environment.set(\"known:studentUniqueIdList\", studentUniqueIdList);",
													"",
													"console.log(JSON.stringify(studentUniqueIdList));",
													"",
													"pm.test(\"Should have at least 27 items available for testing this feature.\", () => {",
													"    pm.expect(studentUniqueIdList.length).to.be.at.least(27);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students?limit=27",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											],
											"query": [
												{
													"key": "limit",
													"value": "27"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Valid Paging Scenarios",
							"item": [
								{
									"name": "no paging parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96e811a7-30cf-4c95-9c03-d3cbe1bfeb30",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return one page of 25 items\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(25);",
													"});",
													"",
													"pm.test(\"Should include exactly the first page of items\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    const actualUniqueIds = __.map(responseItems, student => student.studentUniqueId);",
													"    const suppliedUniqueIds = pm.environment.get(\"known:studentUniqueIdList\");",
													"    const expectedUniqueIds = __.slice(suppliedUniqueIds, 0, 25);",
													"    ",
													"    pm.expect(actualUniqueIds).to.have.members(expectedUniqueIds);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6175f16-e6f6-4800-b5b0-213b40031a5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentById",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentById"
											]
										},
										"description": "Scenario: Composite is requested using no paging parameters\r\n    Given the basis of the scenario is the first \"25\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination\r\n    Then the response should contain result items \"1\" to \"25\""
									},
									"response": []
								},
								{
									"name": "page size parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91170fd7-55d4-48c8-9d15-97e8b4c968db",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the number of items specified by the 'limit' parameter\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(pm.variables.get(\"supplied:limit\"));",
													"});",
													"",
													"pm.test(\"Should include the first few items, up to the number requested\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    const actualUniqueIds = __.map(responseItems, student => student.studentUniqueId);",
													"    const suppliedUniqueIds = pm.environment.get(\"known:studentUniqueIdList\");",
													"    const expectedUniqueIds = __.slice(suppliedUniqueIds, 0, pm.variables.get(\"supplied:limit\"));",
													"    ",
													"    pm.expect(actualUniqueIds).to.have.members(expectedUniqueIds);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e534f9cd-8c29-4f08-ab92-1b7f60fd60bf",
												"exec": [
													"pm.variables.set(\"supplied:limit\", 2);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?limit={{supplied:limit}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{supplied:limit}}"
												}
											]
										},
										"description": "Scenario: Composite is requested using page size parameter\r\n    Given the basis of the scenario is the first \"2\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination with parameters [limit=2]\r\n    Then the response should contain result items \"1\" to \"2\""
									},
									"response": []
								},
								{
									"name": "page size parameter that is named using non-lower-case characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72b4afb8-a8cb-49a8-8930-5a7ab82e6b72",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the number of items specified by the 'limit' parameter\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(pm.variables.get(\"supplied:limit\"));",
													"});",
													"",
													"pm.test(\"Should include the first few items, up to the number requested\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    const actualUniqueIds = __.map(responseItems, student => student.studentUniqueId);",
													"    const suppliedUniqueIds = pm.environment.get(\"known:studentUniqueIdList\");",
													"    const expectedUniqueIds = __.slice(suppliedUniqueIds, 0, pm.variables.get(\"supplied:limit\"));",
													"    ",
													"    pm.expect(actualUniqueIds).to.have.members(expectedUniqueIds);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68854a16-3c7e-41d7-a341-2e17455f8b9e",
												"exec": [
													"pm.variables.set(\"supplied:limit\", 2);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?LiMiT=2",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "LiMiT",
													"value": "2"
												}
											]
										},
										"description": "Scenario: Composite is requested using page size parameter that is named using non-lower-case characters\r\n    Given the basis of the scenario is the first \"2\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination with parameters:\r\n        | Name  | Value |\r\n        | LiMiT | 2     |\r\n    Then the response should contain result items \"1\" to \"2\""
									},
									"response": []
								},
								{
									"name": "both pages size and page offset parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f8b46f5-2b42-440e-9922-94797291f69c",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return the number of items specified by the 'limit' parameter\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(pm.variables.get(\"supplied:limit\"));",
													"});",
													"",
													"pm.test(\"Should include the first few items, up to the number requested\", () => {",
													"    const responseItems = pm.response.json();",
													"    ",
													"    const actualUniqueIds = __.map(responseItems, student => student.studentUniqueId);",
													"    const suppliedUniqueIds = pm.environment.get(\"known:studentUniqueIdList\");",
													"    ",
													"    const suppliedOffset = pm.variables.get(\"supplied:offset\");",
													"    const suppliedLimit = pm.variables.get(\"supplied:limit\");",
													"    ",
													"    const expectedUniqueIds = __.slice(suppliedUniqueIds, suppliedOffset, suppliedOffset + suppliedLimit);",
													"    ",
													"    pm.expect(actualUniqueIds).to.have.members(expectedUniqueIds);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1fd89bab-8f4a-41d7-b065-1ad7ee104541",
												"exec": [
													"pm.variables.set(\"supplied:limit\", 3);",
													"pm.variables.set(\"supplied:offset\", 2);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?limit={{supplied:limit}}&offset={{supplied:offset}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{supplied:limit}}"
												},
												{
													"key": "offset",
													"value": "{{supplied:offset}}"
												}
											]
										},
										"description": "Scenario: Composite is requested using both pages size and page offset parameters\r\n    Given the basis of the scenario is the first \"5\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination with parameters [limit=3,offset=2]\r\n    Then the response should contain result items \"3\" to \"5\""
									},
									"response": []
								},
								{
									"name": "valid page size of 100 results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2f9192b-8bec-4d63-8fe8-0747d0912b3b",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return 100 items\", () => {",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.equal(100);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?limit=100",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												}
											]
										},
										"description": "Scenario: Composite is requested using a valid page size of 100 results\r\n    When a GET (all) request is submitted to the \"StudentById\" composite for pagination with parameters:\r\n        | Name  | Value |\r\n        | limit | 100   |\r\n    Then the response should indicate success"
									},
									"response": []
								},
								{
									"name": "page offset parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28755596-9204-46b3-b32c-f089c2d0a708",
												"exec": [
													"// Changing this offset to a higher number requires a corresponding increase of the \"known\" student data",
													"pm.variables.set(\"supplied:offset\", 2);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7d751797-d604-4297-9dd1-ab526848b015",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return a default page size of 25 items\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.equal(25);",
													"});",
													"",
													"pm.test(\"Should skip the first few items, as specified by the 'offset' parameter, in forming the page of results\", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"    const actualUniqueIds = __.map(responseItems, student => student.studentUniqueId);",
													"",
													"    const suppliedUniqueIds = pm.environment.get(\"known:studentUniqueIdList\");",
													"    ",
													"    const suppliedOffset = pm.variables.get(\"supplied:offset\");",
													"",
													"    const expectedUniqueIds = __.slice(suppliedUniqueIds, suppliedOffset, suppliedOffset + 25);",
													"    ",
													"    pm.expect(actualUniqueIds).to.have.members(expectedUniqueIds);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?offset={{supplied:offset}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "offset",
													"value": "{{supplied:offset}}"
												}
											]
										},
										"description": "Scenario: Composite is requested using page offset parameter\r\n    Given the basis of the scenario is the first \"27\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination with parameters [offset=2]\r\n    Then the response should contain result items \"3\" to \"27\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invalid Paging Scenarios",
							"item": [
								{
									"name": "page size of 0 results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "586611ca-0123-4c0d-b79d-8c3ededb7209",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating that the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
													"    const responseItem = pm.response.json();",
													"    pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?limit=0",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "limit",
													"value": "0"
												}
											]
										},
										"description": "Scenario: Composite is requested using a page size of 0 results\r\n    When a GET (all) request is submitted to the \"StudentById\" composite for pagination with parameters:\r\n        | Name  | Value |\r\n        | limit | 0   |\r\n    Then the response should be a \"400\" with message \"Limit must be omitted or set to a value between 1 and 100.\""
									},
									"response": []
								},
								{
									"name": "page size of more than 100 results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae71999-c63f-4aca-ae8e-1cebd51348ef",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating the limit must be omitted or set to a value between 1 and defaultPageSizeLimit\", () => {",
													"     ",
													"     const responseItem = pm.response.json();",
													"     pm.expect(responseItem.message).to.equal(\"Limit must be omitted or set to a value between 1 and max value defined in configuration file (defaultPageSizeLimit).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentByIds?limit=501",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentByIds"
											],
											"query": [
												{
													"key": "limit",
													"value": "501"
												}
											]
										},
										"description": "Scenario: Composite is requested using a page size of more than 100 results\r\n    When a GET (all) request is submitted to the \"StudentById\" composite for pagination with parameters:\r\n        | Name  | Value |\r\n        | limit | 101   |\r\n    Then the response should be a \"400\" with message \"Limit must be omitted or set to a value between 1 and 100.\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Non-Numeric Paging Scenarios",
							"item": [
								{
									"name": "non-numeric page size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a50a6d0c-5d1d-4b28-a2ed-3921590c6a58",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should return a message indicating an invalid limit specified\", () => {",
													"     ",
													"     const responseItem = pm.response.json();",
													"     pm.expect(responseItem.message).to.equal(\"Invalid limit specified.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?limit=abc",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "limit",
													"value": "abc"
												}
											]
										},
										"description": "Scenario: Composite is requested using a non-numeric page size\r\n    Given the basis of the scenario is the first \"5\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination with parameters [limit=abc]\r\n    Then the response should be a \"400\" with message \"Invalid limit specified.\""
									},
									"response": []
								},
								{
									"name": "non-numeric offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f4d094a-e5e5-4825-ad9e-4cfc1d20b35e",
												"exec": [
													"pm.test(\"Status code is 400\", () => {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"pm.test(\"Should a message indicating an invalid offset specified\", () => {",
													"     ",
													"     const responseItem = pm.response.json();",
													"     pm.expect(responseItem.message).to.equal(\"Invalid offset specified.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?offset=abc",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "offset",
													"value": "abc"
												}
											]
										},
										"description": "Scenario: Composite is requested using a non-numeric offset\r\n    Given the basis of the scenario is the first \"5\" items in the \"Staff\" resource\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite for pagination with parameters:\r\n        | Name   | Value |\r\n        | offset | abc   |\r\n    Then the response should be a \"400\" with message \"Invalid offset specified.\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature: Composites support url based field selection",
					"item": [
						{
							"name": "Initialize Known Data",
							"item": [
								{
									"name": "Initialize Known Student Data for Field Selector Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88d46c76-b3e0-43f6-b545-132e4d622bae",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													" pm.environment.set('known:studentUniqueId', __.last(responseItems).studentUniqueId);",
													" pm.environment.set('known:studentFirstName', __.last(responseItems).firstName);",
													" pm.environment.set('known:studentLastSurname', __.last(responseItems).lastSurname);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/students",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"students"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Known studentEducationOrganizationAssociations Data for Field Selector Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "887ebac7-fe28-44b5-99ac-181a933db648",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"const studentEducationOrganizationAssociationList = __.map(responseItems, studentEducationOrganization => ",
													"    {",
													"        return { ",
													"            streetNumberName: studentEducationOrganization.addresses[0].streetNumberName, ",
													"            city: studentEducationOrganization.addresses[0].city,",
													"            addressTypeDescriptor: studentEducationOrganization.addresses[0].addressTypeDescriptor,",
													"            stateAbbreviationDescriptor: studentEducationOrganization.addresses[0].stateAbbreviationDescriptor,",
													"            postalCode: studentEducationOrganization.addresses[0].postalCode,",
													"        };",
													"    });",
													"",
													" pm.environment.set('known:streetNumberName', __.first(studentEducationOrganizationAssociationList)[\"streetNumberName\"]);",
													" pm.environment.set('known:city', __.first(studentEducationOrganizationAssociationList)[\"city\"]);",
													" pm.environment.set('known:addressTypeDescriptor', __.first(studentEducationOrganizationAssociationList)[\"addressTypeDescriptor\"]);",
													" pm.environment.set('known:stateAbbreviationDescriptor', __.first(studentEducationOrganizationAssociationList)[\"stateAbbreviationDescriptor\"]);",
													" pm.environment.set('known:postalCode', __.first(studentEducationOrganizationAssociationList)[\"postalCode\"]);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/studentEducationOrganizationAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"studentEducationOrganizationAssociations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Field Selector Scenarios",
							"item": [
								{
									"name": "Field selector on a Person entity containing a UniqueId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7d90702-6a62-40ab-b36e-b1e233db5b98",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return the with members 'studentUniqueId','firstName','lastSurname \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentUniqueId','firstName','lastSurname']);",
													"     });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2bd0c193-fe93-4269-9809-06468feca121",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentProperties?fields=studentUniqueId, firstName, lastSurname",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentProperties"
											],
											"query": [
												{
													"key": "fields",
													"value": "studentUniqueId, firstName, lastSurname"
												}
											]
										},
										"description": "Scenario: Composite is requested using field selector on a Person entity containing a UniqueId\r\n    Given the subject of the request is a student with values in all name properties\r\n    When a GET (by id) request is submitted to the \"StudentProperty\" composite with the following parameters:\r\n    | Name   | Value                                   |\r\n    | fields | studentUniqueId, firstName, lastSurname |\r\n    Then the response model should have only the specific members [studentUniqueId,firstName,lastSurname]"
									},
									"response": []
								},
								{
									"name": "Field selector on a non-Person entity containing a UniqueId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfb51a94-4d95-4bb9-9c68-4702f884e3fa",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return items with only the specified top-level members\", () => {",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, responseItem => {",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentUniqueId','administrationDate','administrationLanguageDescriptor']);",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4569b808-049d-4297-8dba-fb7cc53a6b09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentAssessmentWithUniqueIdAndDescriptors?fields=studentUniqueId, administrationDate, administrationLanguageDescriptor",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentAssessmentWithUniqueIdAndDescriptors"
											],
											"query": [
												{
													"key": "fields",
													"value": "studentUniqueId, administrationDate, administrationLanguageDescriptor"
												}
											]
										},
										"description": "Scenario: Composite is requested using field selector on a non-Person entity containing a UniqueId\r\n    Given the subject of the request is a StudentAssessment with ObjectAssessmentScoreResults\r\n    When a GET (by id) request is submitted to the \"StudentAssessmentWithUniqueIdAndDescriptor\" composite with the following parameters:\r\n    | Name   | Value                                                                                                |\r\n    | fields | studentUniqueId, administrationDate, administrationLanguageDescriptor, administrationEnvironmentType |\r\n    Then the response model should have only the specific members [studentUniqueId, administrationDate, administrationLanguageDescriptor]"
									},
									"response": []
								},
								{
									"name": "Field selector containing a subset of top-level members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c25b6e9-92a5-4fcb-bb55-b21de48dae49",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return items with only the specified top-level members\", () => {",
													"    const responseItems = pm.response.json();",
													"",
													"    responseItems.forEach(responseItem =>  {",
													"        const properties = Object.keys(responseItem);",
													"        ",
													"        pm.expect(properties).to.have.members(['firstName','lastSurname']);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6d616ea4-74cb-47ca-ae8e-f25137487b2f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentProperties?fields=firstName,lastSurname",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentProperties"
											],
											"query": [
												{
													"key": "fields",
													"value": "firstName,lastSurname"
												}
											]
										},
										"description": "Scenario: Composite is requested using field selector containing a subset of top-level members\r\n    Given the subject of the request is a student with values in all name properties\r\n    When a GET (by id) request is submitted to the \"StudentProperty\" composite with the following parameters:\r\n    | Name   | Value                 |\r\n    | fields | firstName,lastSurname |\r\n    Then the response model should have only the specific members [firstName,lastSurname]"
									},
									"response": []
								},
								{
									"name": "Field selector containing a subset of a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06a65a00-a3a3-4e70-9ecd-b887341b9974",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"let verifiableItems = []",
													"",
													"pm.test(\"Should return some data for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"    verifiableItems = __.filter(responseItems, responseItem => responseItem.studentEducationOrganizationAssociationAddresses.length > 0);",
													"     ",
													"     pm.expect(verifiableItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return each item with just the requested child collection\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"     responseItems.forEach(responseItem => {",
													"         pm.expect(Object.keys(responseItem)).has.members(['studentEducationOrganizationAssociationAddresses']);",
													"     });",
													"});",
													"",
													"pm.test(\"Should return each item of the child collection with just the requested elements\", () => {",
													"     verifiableItems.forEach(responseItem => {",
													"         const addresses = responseItem.studentEducationOrganizationAssociationAddresses;",
													"         ",
													"         addresses.forEach(address => {",
													"            pm.expect(Object.keys(address)).has.members(['city', 'postalCode']);    ",
													"         });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e2756fe-2e3a-43db-8adf-4396a5119f1b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollectionWithProperties?fields=studentEducationOrganizationAssociationAddresses(city,postalCode)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollectionWithProperties"
											],
											"query": [
												{
													"key": "fields",
													"value": "studentEducationOrganizationAssociationAddresses(city,postalCode)"
												}
											]
										},
										"description": "Scenario: Composite is requested using field selector containing a subset of a child collection\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentEducationOrganizationAssociationCollectionWithProperty\" composite with the following parameters:\r\n    | Name   | Value                             |\r\n    | fields | studentEducationOrganizationAssociationAddresses(city,postalCode) |\r\n    Then the response model should have only the specific members [studentEducationOrganizationAssociationAddresses]\r\n    And the response model at path \"studentEducationOrganizationAssociationAddresses[0]\" should only have the specific members [city,postalCode]"
									},
									"response": []
								},
								{
									"name": "Field selector containing all members of a child collection using the asterisk selector",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e674bb6e-3438-4afe-9daf-9fa1153aab84",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"let verifiableItems = []",
													"",
													"pm.test(\"Should return some data for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"    verifiableItems = __.filter(responseItems, responseItem => ",
													"        responseItem.studentEducationOrganizationAssociationAddresses.length > 0);",
													"     ",
													"     pm.expect(verifiableItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return each item with just the requested child collection\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"     responseItems.forEach(responseItem => {",
													"         pm.expect(Object.keys(responseItem)).has.members(['studentEducationOrganizationAssociationAddresses']);",
													"     });",
													"});",
													"",
													"pm.test(\"Should return each item of the child collections with all elements\", () => {",
													"     verifiableItems.forEach(responseItem => {",
													"         const addresses = responseItem.studentEducationOrganizationAssociationAddresses;",
													"         ",
													"         addresses.forEach(address => {",
													"            pm.expect(Object.keys(address)).has.members(['addressTypeDescriptor', 'streetNumberName', 'city', 'stateAbbreviationDescriptor', 'postalCode']);    ",
													"         });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f9897a55-6a03-4b5e-be8a-b0c1f7ac641c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollectionWithProperties?fields=studentEducationOrganizationAssociationAddresses(*)",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollectionWithProperties"
											],
											"query": [
												{
													"key": "fields",
													"value": "studentEducationOrganizationAssociationAddresses(*)"
												}
											]
										},
										"description": "Scenario: Composite is requested using field selector containing all members of a child collection using the asterisk selector\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentEducationOrganizationAssociationCollectionWithProperty\" composite with the following parameters:\r\n    | Name   | Value               |\r\n    | fields | studentEducationOrganizationAssociationAddresses(*) |\r\n    Then the response model should have only the specific members [studentEducationOrganizationAssociationAddresses]\r\n    And the response model at path \"studentEducationOrganizationAssociationAddresses[0]\" should only have the specific members [addressTypeDescriptor,streetNumberName,city,stateAbbreviationDescriptor,postalCode]"
									},
									"response": []
								},
								{
									"name": "Field selector containing all members of a child collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad067445-4ad3-44b4-b3ab-52594abb03be",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"let verifiableItems = []",
													"",
													"pm.test(\"Should return some data for verification\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"    verifiableItems = __.filter(responseItems, responseItem => ",
													"        responseItem.studentEducationOrganizationAssociationAddresses.length > 0);",
													"     ",
													"     pm.expect(verifiableItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return each item with just the requested child collection\", () => {",
													"     const responseItems = pm.response.json();",
													"     ",
													"     responseItems.forEach(responseItem => {",
													"         pm.expect(Object.keys(responseItem)).has.members(['studentEducationOrganizationAssociationAddresses']);",
													"     });",
													"});",
													"",
													"pm.test(\"Should return each item of the child collections with all elements\", () => {",
													"     verifiableItems.forEach(responseItem => {",
													"         const addresses = responseItem.studentEducationOrganizationAssociationAddresses;",
													"         ",
													"         addresses.forEach(address => {",
													"            pm.expect(Object.keys(address)).has.members(['addressTypeDescriptor', 'streetNumberName', 'city', 'stateAbbreviationDescriptor', 'postalCode']);    ",
													"         });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb18fc00-7628-402a-8d02-8dd40e6c6d97",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollectionWithProperties?fields=studentEducationOrganizationAssociationAddresses",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollectionWithProperties"
											],
											"query": [
												{
													"key": "fields",
													"value": "studentEducationOrganizationAssociationAddresses"
												}
											]
										},
										"description": "Scenario: Composite is requested using field selector containing all members of a child collection\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentEducationOrganizationAssociationCollectionWithProperty\" composite with the following parameters:\r\n    | Name   | Value            |\r\n    | fields | studentEducationOrganizationAssociationAddresses |\r\n    Then the response model should have only the specific members [studentEducationOrganizationAssociationAddresses]\r\n    And the response model at path \"studentEducationOrganizationAssociationAddresses[0]\" should only have the specific members [addressTypeDescriptor,streetNumberName,city,stateAbbreviationDescriptor,postalCode]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature: Composite can be filtered by url query string",
					"item": [
						{
							"name": "Initialize Known",
							"item": [
								{
									"name": "Initialize Known Staff Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e30143f2-6aee-413e-9eeb-a368cd4f1c32",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"const testSubject = __.last(responseItems);",
													"",
													"pm.environment.set('known:staffUniqueId', testSubject.staffUniqueId);",
													"pm.environment.set('known:staffId', testSubject.id);",
													"",
													"pm.environment.set('known:highestCompletedLevelOfEducationDescriptor', testSubject.highestCompletedLevelOfEducationDescriptor);",
													"",
													"pm.environment.set('known:highestCompletedLevelOfEducationDescriptor:uriEncoded', encodeURIComponent(testSubject.highestCompletedLevelOfEducationDescriptor));",
													"",
													"pm.environment.set('known:yearsOfPriorProfessionalExperience', testSubject.yearsOfPriorProfessionalExperience);",
													"",
													"pm.environment.set('known:hispanicLatinoEthnicity', testSubject.hispanicLatinoEthnicity);",
													"/*",
													"    pm.environment.set('known:birthDate', __.last(responseItems)[\"birthDate\"])",
													"    pm.environment.set('known:yearsOfPriorProfessionalExperience', __.last(responseItems)[\"yearsOfPriorProfessionalExperience\"])",
													"    pm.environment.set('known:hispanicLatinoEthnicity', __.last(responseItems)[\"hispanicLatinoEthnicity\"]);",
													"    pm.environment.set('known:staffLastSurname', __.last(responseItems)[\"lastSurname\"])",
													"    pm.environment.set('known:highestCompletedLevelOfEducationDescriptor',encodeURIComponent( __.last(responseItems)[\"highestCompletedLevelOfEducationDescriptor\"]));",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Known Program Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c0507bd-96f1-4312-b0f5-11989d8f282d",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"  pm.environment.set('known:programId', __.first(responseItems)[\"programId\"]);",
													"  pm.environment.set('known:programTypeDescriptor', __.first(responseItems)[\"programTypeDescriptor\"]);",
													"  pm.environment.set('known:programTypeDescriptor:uriEncoded', encodeURIComponent(__.first(responseItems)[\"programTypeDescriptor\"]));",
													"  pm.environment.set('known:programGuid', __.first(responseItems)[\"id\"]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/Programs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"Programs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initialize Known Session Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f14c58-520b-46ba-8695-331c66b0f69d",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"",
													"const testSubject = __.first(responseItems);",
													"",
													"pm.environment.set('known:sessionBeginDate', testSubject.beginDate);",
													"pm.environment.set('known:schoolYear', testSubject.schoolYearTypeReference.schoolYear);",
													"pm.environment.set('known:sessionGuid', testSubject.sessionGuid);",
													"pm.environment.set('known:totalInstructionalDays', testSubject.totalInstructionalDays);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/sessions",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"sessions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite can be filtered by url query string",
							"item": [
								{
									"name": "Negative Scenarios",
									"item": [
										{
											"name": "Criteria for a non-existing property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "edaa559f-c941-40ea-8fe9-8dcd351d0021",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"",
															"pm.test(\"Should return a message indicating that the property does not exist or is not available.\", () => {",
															"     ",
															"     const responseItem = pm.response.json();",
															"     pm.expect(responseItem.message).to.equal(\"The property \\'Nonexistent\\' does not exist or is not available.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ff5e30ee-7aa4-4e0d-8032-f84e3b854deb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionFilters?Nonexistent=Nothing",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"SessionFilters"
													],
													"query": [
														{
															"key": "Nonexistent",
															"value": "Nothing"
														}
													]
												},
												"description": "Scenario: Composite request includes criteria for a non-existing property\r\n    Given the subject of the request is \"Session\" with invalid query where\r\n    | ParameterName | Value   | Type   |\r\n    | Nonexistent   | Nothing | string |    \r\n    When a GET (all) request is submitted to the \"SessionFilter\" composite with the query string filter\r\n    Then the response should be a \"400\" with message \"The property 'Nonexistent' does not exist or is not available.\""
											},
											"response": []
										},
										{
											"name": "Value that is not a valid data type for the targeted property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8a21d58-77c6-437c-b45b-f4fe0da8c34c",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.expect(pm.response.code).to.equal(400);",
															"});",
															"",
															"pm.test(\"Should return a message indicating that an invalid query string parameter value was provided.\", () => {",
															"     ",
															"     const responseItem = pm.response.json();",
															"     ",
															"     // Use regular expression to perform a \"startsWith\" expectation",
															"     pm.expect(responseItem.message).to.match(/^Invalid query string parameter value provided./);",
															"      ",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e81b5680-fe6c-44dd-81d2-bb2dee5e2bb5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionFilters?BeginDate=Hello",
													"host": [
														"{{ApiBaseUrl}}"
													],
													"path": [
														"composites",
														"v1",
														"ed-fi",
														"test",
														"SessionFilters"
													],
													"query": [
														{
															"key": "BeginDate",
															"value": "Hello"
														}
													]
												},
												"description": "Scenario: Composite request uses a value that is not a valid data type for the targeted property\r\n    Given the subject of the request is \"Session\" with invalid query where\r\n    | ParameterName | Value | Type     |\r\n    | BeginDate     | Hello | DateTime |\r\n    When a GET (all) request is submitted to the \"SessionFilter\" composite with the query string filter\r\n    Then the response should be a \"400\" with message \"Invalid query string parameter value provided.\""
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Exact Match Scenarios",
							"item": [
								{
									"name": "Exact match on a unique id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbcd3333-856f-4f62-8eea-9bb9c19eae0f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return the item matching the known unique Id\", () => {",
													"    // TODO: The API should be returning an array. Test will need to be updated when bug is fixed.",
													"    const responseItem = pm.response.json();",
													"    ",
													"    pm.expect(responseItem.staffUniqueId).to.equal(pm.environment.get(\"known:staffUniqueId\"));",
													"    ",
													"    pm.expect(responseItem.id).to.equal(pm.environment.get(\"known:staffId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2501db4-bd0f-48bb-87ee-ebc5e5a16d21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffWithUniqueIds?StaffUniqueId={{known:staffUniqueId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffWithUniqueIds"
											],
											"query": [
												{
													"key": "StaffUniqueId",
													"value": "{{known:staffUniqueId}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on a unique id\r\n    Given the subject of the request is \"Staff\" where\r\n    | ParameterName | Value  | Type |\r\n    | StaffUniqueId | 207288 | int  |    \r\n    When a GET (all) request is submitted to the \"StaffWithUniqueId\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the property of type \"int\""
									},
									"response": []
								},
								{
									"name": "Exact match on a descriptor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "309bcc80-b989-4275-9767-2f098a70f7b0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the supplied descriptor value\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"     const suppliedHighestCompletedLevelOfEducationDescriptor = pm.environment.get(\"known:highestCompletedLevelOfEducationDescriptor\");",
													"     ",
													"     responseItems.forEach(staff =>  {",
													"            pm.expect(staff.highestCompletedLevelOfEducationDescriptor).to.equal(suppliedHighestCompletedLevelOfEducationDescriptor);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e54477a-fc31-40b6-8257-fe5c83a38bf1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffWithDescriptors?highestCompletedLevelOfEducationDescriptor={{known:highestCompletedLevelOfEducationDescriptor:uriEncoded}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffWithDescriptors"
											],
											"query": [
												{
													"key": "highestCompletedLevelOfEducationDescriptor",
													"value": "{{known:highestCompletedLevelOfEducationDescriptor:uriEncoded}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on a descriptor\r\n    Given the subject of the request is \"Staff\" with a given descriptor where\r\n    | ParameterName                              | Value                                               | Type   |\r\n    | HighestCompletedLevelOfEducationDescriptor | uri://ed-fi.org/LevelOfEducationDescriptor#Master's | string |\r\n    When a GET (all) request is submitted to the \"StaffWithDescriptor\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the property \"highestCompletedLevelOfEducationDescriptor\" of type \"string\""
									},
									"response": []
								},
								{
									"name": "Exact match on a string value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ade98824-3e1c-4b67-8ceb-1318f70bf77e",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the supplied string parameter value\", () => {",
													"    const responseItems = pm.response.json();",
													"",
													"    __.each(responseItems, responseItem => {",
													"        pm.expect(responseItem.lastSurname).to.equal(pm.environment.get(\"known:staffLastSurname\")); ",
													"    });",
													"});",
													"",
													"",
													"   "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e88e61f7-3f04-4111-a9ad-0d349859c37a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?LastSurname={{known:staffLastSurname}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "LastSurname",
													"value": "{{known:staffLastSurname}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on a string value\r\n    Given the subject of the request is \"Staff\" where\r\n\r\n    | ParameterName | Value | Type   |\r\n    | LastSurname   | Gomez | string |\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the property of type \"string\""
									},
									"response": []
								},
								{
									"name": "Exact match on decimal and boolean values",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce07086f-566d-4e44-b40a-d09ebd518baf",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the supplied decimal and boolean values\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"        pm.expect(responseItem.yearsOfPriorProfessionalExperience).to.equal(pm.environment.get(\"known:yearsOfPriorProfessionalExperience\"));",
													"        ",
													"        pm.expect(responseItem.hispanicLatinoEthnicity).to.equal(pm.environment.get(\"known:hispanicLatinoEthnicity\"));",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3dda5277-f03d-4e7e-8024-d5b7eaf8dd96",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?YearsOfPriorProfessionalExperience={{known:yearsOfPriorProfessionalExperience}}&HispanicLatinoEthnicity={{known:hispanicLatinoEthnicity}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "YearsOfPriorProfessionalExperience",
													"value": "{{known:yearsOfPriorProfessionalExperience}}"
												},
												{
													"key": "HispanicLatinoEthnicity",
													"value": "{{known:hispanicLatinoEthnicity}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on decimal and boolean values\r\n    Given the subject of the request is \"Staff\" where\r\n    | ParameterName                      | Value | Type    |\r\n    | YearsOfPriorProfessionalExperience | 5.00  | decimal |\r\n    | HispanicLatinoEthnicity            | true  | boolean |\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the properties of type \"decimal\" and \"boolean\""
									},
									"response": []
								},
								{
									"name": "Exact match on decimal values",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c147842a-15ed-422b-9f1f-0b83570c998a",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the supplied decimal values\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"        pm.expect(responseItem.yearsOfPriorProfessionalExperience).to.equal(pm.environment.get(\"known:yearsOfPriorProfessionalExperience\"));",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a9d8255-0252-4c6b-8569-8a5bac5e0f68",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?YearsOfPriorProfessionalExperience={{known:yearsOfPriorProfessionalExperience}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "YearsOfPriorProfessionalExperience",
													"value": "{{known:yearsOfPriorProfessionalExperience}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on decimal and boolean values\r\n    Given the subject of the request is \"Staff\" where\r\n    | ParameterName                      | Value | Type    |\r\n    | YearsOfPriorProfessionalExperience | 5.00  | decimal |\r\n    | HispanicLatinoEthnicity            | true  | boolean |\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the properties of type \"decimal\" and \"boolean\""
									},
									"response": []
								},
								{
									"name": "Exact match on boolean values",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc764391-5e12-4f99-bc4d-741d4afb6a8e",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the supplied boolean value\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"        pm.expect(responseItem.hispanicLatinoEthnicity).to.equal(pm.environment.get(\"known:hispanicLatinoEthnicity\"));",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97187bc6-36fb-438c-8f24-c60ca3a47a13",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffFilters?HispanicLatinoEthnicity={{known:hispanicLatinoEthnicity}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StaffFilters"
											],
											"query": [
												{
													"key": "HispanicLatinoEthnicity",
													"value": "{{known:hispanicLatinoEthnicity}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on decimal and boolean values\r\n    Given the subject of the request is \"Staff\" where\r\n    | ParameterName                      | Value | Type    |\r\n    | YearsOfPriorProfessionalExperience | 5.00  | decimal |\r\n    | HispanicLatinoEthnicity            | true  | boolean |\r\n    When a GET (all) request is submitted to the \"StaffFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the properties of type \"decimal\" and \"boolean\""
									},
									"response": []
								},
								{
									"name": "Exact match on a short integer value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "352d5f21-681f-4190-aa79-de618e4e9c48",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the supplied short integer\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"       ",
													"            pm.expect(responseItem.schoolYear).to.equal(pm.environment.get(\"known:schoolYear\"));",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3104790-cf66-4ddb-8023-5d72d2b5f285",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionFilters?SchoolYear={{known:schoolYear}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SessionFilters"
											],
											"query": [
												{
													"key": "SchoolYear",
													"value": "{{known:schoolYear}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on a short integer value\r\n    Given the subject of the request is \"Session\" where\r\n    | ParameterName | Value | Type  |\r\n    | SchoolYear    | 2011  | short |\r\n    When a GET (all) request is submitted to the \"SessionFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the property of type \"short\""
									},
									"response": []
								},
								{
									"name": "Exact match on an integer value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6e49460-389a-40fb-a30c-af385185d2aa",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should only return items matching the integer value\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     pm.expect(responseItems.length).to.be.above(0);",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"            pm.expect(responseItem.totalInstructionalDays).to.equal(pm.environment.get(\"known:totalInstructionalDays\")); ",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "47b293a3-709d-4038-9418-cb6422b2da00",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionFilters?TotalInstructionalDays={{known:totalInstructionalDays}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SessionFilters"
											],
											"query": [
												{
													"key": "TotalInstructionalDays",
													"value": "{{known:totalInstructionalDays}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on an integer value\r\n    Given the subject of the request is \"Session\" where\r\n    | ParameterName          | Value | Type |\r\n    | TotalInstructionalDays | 88    | int  |\r\n    When a GET (all) request is submitted to the \"SessionFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the property of type \"int\""
									},
									"response": []
								},
								{
									"name": "Exact match on a datetime value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c104923-4c87-4dce-b4c0-3d12b5cf801c",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should only return items matching the supplied date\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const actualBeginDate = new Date(stripTimeFromDate(responseItem.beginDate));",
													"        const suppliedBeginDate = new Date(pm.variables.get(\"known:sessionBeginDate\"));",
													"        pm.expect(actualBeginDate.getTime()).to.equal(suppliedBeginDate.getTime());",
													"     });",
													"});",
													"",
													"",
													"",
													"function stripTimeFromDate(rawValue) {",
													"    return rawValue.substring(0, rawValue.indexOf(\"T\"));",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "47b8630e-2678-4b8d-9ac1-98040371eab5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SessionFilters?BeginDate={{known:sessionBeginDate}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SessionFilters"
											],
											"query": [
												{
													"key": "BeginDate",
													"value": "{{known:sessionBeginDate}}"
												}
											]
										},
										"description": "Scenario: Composite request is for an exact match on a datetime value\r\n    Given the subject of the request is \"Session\" where\r\n    | ParameterName | Value      | Type    |\r\n    | BeginDate     | 2010-08-23 | DateTime|    \r\n    When a GET (all) request is submitted to the \"SessionFilter\" composite with the query string filter\r\n    Then the response should only contain the exact records based on the supplied criteria for the property of type \"DateTime\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature: Composite resource model",
					"item": [
						{
							"name": "Initialize Known Data",
							"item": [
								{
									"name": "Initialize Known Staff Data for Range Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1d48512-bc48-45a5-a33d-844f50313bfe",
												"exec": [
													"const __ = require('lodash');",
													"",
													"const responseItems = pm.response.json();",
													"const testSubject = __.last(responseItems);",
													"",
													"    pm.environment.set('known:staffUniqueId', testSubject.staffUniqueId);",
													"    pm.environment.set('known:staffId', testSubject.id);",
													"    pm.environment.set('known:birthDate', testSubject.birthDate);",
													"    pm.environment.set('known:yearsOfPriorProfessionalExperience', testSubject.yearsOfPriorProfessionalExperience);",
													"    pm.environment.set('known:hispanicLatinoEthnicity', testSubject.hispanicLatinoEthnicity);",
													"    pm.environment.set('known:staffLastSurname', testSubject.lastSurname);",
													"    pm.environment.set('known:staffFirstName', testSubject.firstName);",
													"    pm.environment.set('known:staffMiddleName', testSubject.middleName);",
													"    ",
													"const lastSurnameList = __.map(responseItems, staff => staff.lastSurname);",
													"",
													"pm.environment.set(\"known:lastSurnameList\", lastSurnameList);",
													"    ",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/staffs",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"staffs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite base resource contains no properties Scenario",
							"item": [
								{
									"name": "Composite base resource contains no properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e0060a7-09a5-4d80-99af-f893dd434ed3",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification\", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should return with member studentEducationOrganizationAssociationAddresses\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);",
													"         ",
													"     });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcee4af4-3dbc-4ac2-b771-700e2f625108",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/BaseResourceCanContainNoProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"BaseResourceCanContainNoProperties"
											]
										},
										"description": "# Base -> No Properties\r\nScenario: Composite base resource contains no properties\r\n    When building a composite resource for the \"BaseResourceCanContainNoProperty\" composite\r\n    Then the composite resource should have only the specific members [StudentEducationOrganizationAssociationAddresses]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Display names applied to all members Scenario",
							"item": [
								{
									"name": "Display names applied to all members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4527b58d-f230-4ead-a3a5-6637cd69cb79",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with all members are property1','collection1','linkedCollection1','linkedCollection2'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"    __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['property1','collection1','linkedCollection1','linkedCollection2']);",
													"         ",
													"     });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6231e340-3531-4ffa-b506-67bf9154df84",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/MembersIncludeDisplayNames",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"MembersIncludeDisplayNames"
											]
										},
										"description": "# Display names applied to all members\r\nScenario: Composite members include display names for properties, collections and linked collections\r\n    When building a composite resource for the \"MembersIncludeDisplayName\" composite \r\n    Then the composite resource should have only the specific members [Property1, Collection1, LinkedCollection1, LinkedCollection2]"
									},
									"response": []
								},
								{
									"name": "Composite members include display names for references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ffe6fa3-02a8-4a32-a4e2-36b912a0d665",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with  member unflattenedReference \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['unflattenedReference']);",
													"         ",
													"     });",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cf0c5955-3bcb-4813-a0f3-df6f56132be8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/UnflattenedReferenceIncludeDisplayNames",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"UnflattenedReferenceIncludeDisplayNames"
											]
										},
										"description": "Scenario: Composite members include display names for references\r\n    When building a composite resource for the \"UnflattenedReferenceIncludeDisplayName\" composite \r\n    Then the composite resource should have only the specific members [UnflattenedReference]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes specific collections Scenario",
							"item": [
								{
									"name": "Composite includes specific collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4b6bb7b-ac13-435f-89b2-1ad831d4a39e",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with  member studentEducationOrganizationAssociationAddresses \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);",
													"         ",
													"     });",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "046351a4-da9c-4f92-9c87-3505e87d2c33",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollections"
											]
										},
										"description": "# Base -> Collections\r\nScenario: Composite includes specific collections\r\n    When building a composite resource for the \"StudentEducationOrganizationAssociationCollection\" composite \r\n    Then the composite resource should have only the specific members [StudentEducationOrganizationAssociationAddresses]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes specific collections Scenario",
							"item": [
								{
									"name": "Composite includes specific linked collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a37f97c0-fd6a-4e9f-ae54-13bd31a4c224",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with  member studentAcademicRecords \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"         ",
													"     });",
													"     ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7baeb151-77ea-48e0-850c-083d5123db8f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollections"
											]
										},
										"description": "# Base -> Linked Collections\r\nScenario: Composite includes specific linked collections\r\n    When building a composite resource for the \"StudentLinkedCollection\" composite \r\n    Then the composite resource should have only the specific members [StudentAcademicRecords]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes specific properties Scenario",
							"item": [
								{
									"name": "Composite includes specific properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2a585f8-ede6-43c3-9164-4ed3703d0b35",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with all members 'studentUniqueId','firstName','lastSurname','birthDate' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentUniqueId','firstName','lastSurname','birthDate']);",
													"         ",
													"     });",
													"     ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "40169ed9-e7b2-4b17-a3af-7761003d6f50",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/studentProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"studentProperties"
											]
										},
										"description": "# Base -> Properties\r\nScenario: Composite includes specific properties\r\n    When building a composite resource for the \"StudentProperty\" composite \r\n    Then the composite resource should have only the specific members [StudentUniqueId, FirstName, LastSurname, BirthDate]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7188fa3-0af8-4087-8e63-d689ce00862e",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with have EmbeddedObject 'StudentReference'  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentReference']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"",
													"",
													"pm.test(\"Should the item return with have EmbeddedObject 'StudentReference' with only the specific members [FirstName, MiddleName, LastSurname] \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"        ",
													"        if(responseItem.studentReference!==null)",
													"        {",
													"             properties = Object.keys(responseItem.studentReference); ",
													"             if(properties.length==3)",
													"             pm.expect(properties).to.have.members(['firstName','lastSurname','middleName']);",
													"        }",
													"         ",
													"     });",
													"     ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e15c7c6-e86c-4719-b22a-d2cd8550c948",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentSchoolUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentSchoolUnflattenedReferences"
											]
										},
										"description": "# Base -> Unflattened Reference\r\nScenario: Composite includes unflattened reference\r\n    When building a composite resource for the \"StudentSchoolUnflattenedReference\" composite \r\n    Then the composite resource should have EmbeddedObject \"StudentReference\" with only the specific members [FirstName, MiddleName, LastSurname]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c880d961-788a-40fd-ae99-4398240b1046",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Should the item return with only the specific members [FirstName, MiddleName, LastSurname]\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        if(properties.length===3)",
													"        {",
													"            pm.expect(properties).to.have.members(['firstName','middleName','lastSurname']);",
													"        }",
													"        ",
													"      });",
													"      ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2ba4d9c-c38f-4b08-b7ec-473d2b2190a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentSchoolFlattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentSchoolFlattenedReferences"
											]
										},
										"description": "# Base -> Flattened Reference\r\nScenario: Composite includes flattened reference\r\n    When building a composite resource for the \"StudentSchoolFlattenedReference\" composite \r\n    Then the composite resource should have only the specific members [FirstName, MiddleName, LastSurname]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes specific references with flattened properties Scenario",
							"item": [
								{
									"name": "Composite includes specific references with flattened properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed5b810c-b242-41b7-aaab-942c97b8b111",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    const responseItems = pm.response.json();",
													"   pm.expect(responseItems.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Should the items return with only the specific members [FirstName]\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['firstName']);",
													"        ",
													"        ",
													"      });",
													"      ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66207403-463f-4146-9a17-452b290dd5b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferencesWithProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferencesWithProperties"
											]
										},
										"description": "# Flattened Reference -> Properties\r\nScenario: Composite includes specific references with flattened properties\r\n    When building a composite resource for the \"StudentFlattenedReferencesWithProperty\" composite \r\n    Then the composite resource should have only the specific members [FirstName]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes specific references with properties Scenario",
							"item": [
								{
									"name": "Composite includes specific references with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b42222a-f2bf-4313-af9b-1f9b6c3b675a",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with have EmbeddedObject 'StudentReference'  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        const properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentReference']);",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the item return with have EmbeddedObject 'StudentReference' with only the specific members [FirstName] \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        if(responseItem.studentReference!==null)",
													"        {",
													"             properties = Object.keys(responseItem.studentReference); ",
													"             pm.expect(properties).to.have.members(['firstName']);",
													"        }",
													"         ",
													"     });",
													"     ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d9ecf441-16f7-41af-b3f2-1714fa6de5b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithProperties"
											]
										},
										"description": "# Unflattened Reference -> Properties\r\nScenario: Composite includes specific references with properties\r\n    When building a composite resource for the \"StudentUnflattenedReferenceWithProperty\" composite \r\n    Then the composite resource should have EmbeddedObject \"StudentReference\" with only the specific members [FirstName]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Include flattened references with flattened references Scenario",
							"item": [
								{
									"name": "Composites include flattened references with flattened references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62937340-994e-4ee2-af7e-942a8352053c",
												"exec": [
													"",
													"",
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"pm.test(\"Should the items return with only the specific members [localEducationAgencyCategoryDescriptor]\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['localEducationAgencyCategoryDescriptor']);",
													"        ",
													"        ",
													"      });",
													"      ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa8ff8d9-3cd2-496f-953f-fa629bf27fc9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferenceWithFlattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferenceWithFlattenedReferences"
											]
										},
										"description": "# Flattened Reference -> Flattened Reference\r\nScenario: Composites include flattened references with flattened references\r\n    When building a composite resource for the \"StudentFlattenedReferenceWithFlattenedReference\" composite \r\n    Then the composite resource should have only the specific members [CharterStatusDescriptor]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes linked collection containing a linked collection Scenario",
							"item": [
								{
									"name": "Composite includes linked collection containing a linked collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0c9cda0-683d-40d9-b335-e41050e52561",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'StudentAcademicRecords' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with  Collection 'CourseTranscripts'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        ",
													"        if(responseItem.studentAcademicRecords!==null)",
													"        {",
													"              const courseTranscripts  = Object.values(responseItem.studentAcademicRecords); ",
													"              ",
													"              __.each(courseTranscripts, (courseTranscript) => {",
													"                  properties = Object.keys(courseTranscript); ",
													"                  pm.expect(properties).to.have.members(['courseTranscripts']);",
													"              });",
													"        }",
													"         ",
													"     });",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b68830c-1278-4b45-be34-1a86ac5693ca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithLinkedCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithLinkedCollections"
											]
										},
										"description": "# Linked Collection -> Linked Collection\r\nScenario: Composite includes linked collection containing a linked collection\r\n    When building a composite resource for the \"StudentLinkedCollectionWithLinkedCollection\" composite \r\n    Then the composite resource should have Collection \"StudentAcademicRecords\" with Collection \"CourseTranscripts\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes linked collection containing flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes linked collection containing flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ac854cb-16fa-4ed7-9e5e-82cac8a489ef",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAcademicRecords' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with  member 'schoolYear'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        ",
													"        if(responseItem.studentAcademicRecords!==null)",
													"        {",
													"              const schoolYears  = Object.values(responseItem.studentAcademicRecords); ",
													"              ",
													"              __.each(schoolYears, (schoolYear) => {",
													"                  properties = Object.keys(schoolYear); ",
													"                  pm.expect(properties).to.have.members(['schoolYear']);",
													"              });",
													"        }",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66180d12-c429-45c6-8dd5-b58501dd8581",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithFlattenedPropertyReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithFlattenedPropertyReferences"
											]
										},
										"description": "# Linked Collection -> Flattened Reference\r\nScenario: Composite includes linked collection containing flattened reference\r\n    When building a composite resource for the \"StudentLinkedCollectionWithFlattenedPropertyReference\" composite \r\n    Then the composite resource should have Collection \"StudentAcademicRecords\" with properties [SchoolYear]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes linked collection containing unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes linked collection containing unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25f9842b-f0ae-4112-94a8-2e7aaf4a3b7e",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAcademicRecords' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with  member 'schoolYearTypeReference'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        ",
													"        if(responseItem.studentAcademicRecords!==null)",
													"        {",
													"              const schoolYearTypeReferences  = Object.values(responseItem.studentAcademicRecords); ",
													"              ",
													"              __.each(schoolYearTypeReferences, (schoolYearTypeReference) => {",
													"                  properties = Object.keys(schoolYearTypeReference); ",
													"                  pm.expect(properties).to.have.members(['schoolYearTypeReference']);",
													"              });",
													"        }",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12bab777-243d-4d37-8d58-e4a9f9891fd6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithUnflattenedReferences"
											]
										},
										"description": "# Linked Collection -> Unflattened Reference\r\nScenario: Composite includes linked collection containing unflattened reference\r\n    When building a composite resource for the \"StudentLinkedCollectionWithUnflattenedReference\" composite \r\n    Then the composite should have Collection \"StudentAcademicRecords\" with EmbeddedObject \"SchoolYearTypeReference\" with properties [SchoolYear]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes flattened reference with linked collection Scenario",
							"item": [
								{
									"name": "Composite includes flattened reference with linked collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "241b1a28-e4f1-47af-a590-a0877f4ad3b1",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'studentReference' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentReference']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with  member 'studentAssessments'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        if(responseItem.studentReference!==null)",
													"        {",
													"              const studentReferences  = Object.keys(responseItem.studentReference); ",
													"              pm.expect(studentReferences).to.have.members(['studentAssessments']);",
													"        }",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "052b12c7-f015-4394-8131-db70c03e4369",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithLinkedCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithLinkedCollections"
											]
										},
										"description": "# Unflattened Reference -> Linked Collection\r\nScenario: Composite includes flattened reference with linked collection\r\n    When building a composite resource for the \"StudentUnflattenedReferenceWithLinkedCollection\" composite \r\n    Then the composite resource should have EmbeddedObject \"StudentReference\" containing Collection \"StudentAssessments\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes unflattened reference with unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference with unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fba80cc-1df4-4515-a0aa-744a544b7412",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'schoolReference' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['schoolReference']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with  member 'localEducationAgencyReference'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        ",
													"        if(responseItem.schoolReference!==null)",
													"        {",
													"            ",
													"             const schoolReferences  = Object.values(responseItem)[0]; ",
													"              properties = Object.keys(schoolReferences); ",
													"              pm.expect(properties).to.have.members(['localEducationAgencyReference']);",
													"        }",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c01bfd7-6b26-42c3-a340-570cea8c1710",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithUnflattenedReferences"
											]
										},
										"description": "# Unflattened Reference -> Unflattened Reference\r\nScenario: Composite includes unflattened reference with unflattened reference\r\n    When building a composite resource for the \"StudentUnflattenedReferenceWithUnflattenedReference\" composite \r\n    Then the response model should have EmbeddedObject \"SchoolReference\" with EmbeddedObject \"LocalEducationAgencyReference\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes collection with properties Scenario",
							"item": [
								{
									"name": "Composite includes collection with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43764f36-60ac-480b-8215-75a60dd9d11c",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'studentEducationOrganizationAssociationAddresses' \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with  member 'schoolYearTypeReference'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        ",
													"        if(responseItem.studentEducationOrganizationAssociationAddresses!==null)",
													"        {",
													"              const schoolYearTypeReferences  = Object.values(responseItem.studentEducationOrganizationAssociationAddresses); ",
													"              ",
													"              __.each(schoolYearTypeReferences, (schoolYearTypeReference) => {",
													"                  properties = Object.keys(schoolYearTypeReference); ",
													"                  pm.expect(properties).to.have.members(['addressTypeDescriptor','streetNumberName','city','stateAbbreviationDescriptor','postalCode']);",
													"              });",
													"        }",
													"         ",
													"     });",
													"});",
													"     ",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06734aad-3af2-4464-a829-b9e40729c901",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollectionWithProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollectionWithProperties"
											]
										},
										"description": "# Collection -> Properties \r\nScenario: Composite includes collection with properties\r\n    When building a composite resource for the \"StudentEducationOrganizationAssociationCollectionWithProperty\" composite \r\n    Then the composite resource should have Collection \"StudentEducationOrganizationAssociationAddresses\" with only properties [AddressTypeDescriptor, StreetNumberName, City, StateAbbreviationDescriptor, PostalCode]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes collection with collection Scenario",
							"item": [
								{
									"name": "Composite includes collection with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b562d4-2847-494b-9318-cc14b949dd99",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAssessmentStudentObjectiveAssessments' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAssessmentStudentObjectiveAssessments']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07e358e8-21e6-42c1-bafa-3c09f58e6887",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentCollectionWithCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentCollectionWithCollections"
											]
										},
										"description": "# Collection -> Collection\r\nScenario: Composite includes collection with collection\r\n    When building a composite resource for the \"StudentCollectionWithCollection\" composite \r\n    Then the composite resource should have Collection \"StudentAssessmentStudentObjectiveAssessments\" with Collection \"StudentAssessmentStudentObjectiveAssessmentScoreResults\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes collection with unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes collection with unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02b62f4a-a4dd-45fa-a90c-5a7a2a38db73",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAssessmentStudentObjectiveAssessments' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAssessmentStudentObjectiveAssessments']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e03c4c1-886c-40c3-bb45-0996b48d8d17",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentCollectionWithUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentCollectionWithUnflattenedReferences"
											]
										},
										"description": "# Collection -> Unflattened reference\r\nScenario: Composite includes collection with unflattened reference\r\n    When building a composite resource for the \"StudentCollectionWithUnflattenedReference\" composite \r\n    Then the composite should have Collection \"StudentAssessmentStudentObjectiveAssessments\" with EmbeddedObject \"ObjectiveAssessmentReference\" with properties [MaxRawScore]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes collection with flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes collection with flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e4cd46e-0bf1-4b36-a7df-c9195e0bf4cf",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAssessmentStudentObjectiveAssessments' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAssessmentStudentObjectiveAssessments']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78f2a683-a63d-4c5d-9bb2-487b05a6c914",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentCollectionWithFlattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentCollectionWithFlattenedReferences"
											]
										},
										"description": "## Collection -> Flattened reference\r\nScenario: Composite includes collection with flattened reference\r\n    When building a composite resource for the \"StudentCollectionWithFlattenedReference\" composite \r\n    Then the composite resource should have Collection \"StudentAssessmentStudentObjectiveAssessments\" with only properties [MaxRawScore]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes unflattened reference with flattened reference",
							"item": [
								{
									"name": "Composite includes unflattened reference with flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc0bad2-5377-41fb-8d98-7d7cc11359a7",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'schoolReference' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['schoolReference']);",
													"        ",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4b67b64-41ce-4ea1-8571-e5aa8d82c54b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithflattenedReferences"
											]
										},
										"description": "# Unflattened reference -> flattened reference\r\nScenario: Composite includes unflattened reference with flattened reference\r\n    When building a composite resource for the \"StudentUnflattenedReferenceWithflattenedReference\" composite \r\n    Then the composite resource should have EmbeddedObject \"SchoolReference\" with only the specific members [CharterStatusDescriptor]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes unflattened reference with collection Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b917618f-9cf5-4817-af5a-0f704c67254f",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'schoolReference' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['schoolReference']);",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have Collection 'educationOrganizationAddresses' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"     if(responseItem.schoolReference!==null)        ",
													"     {",
													"        const educationOrganizationAddresses = Object.values(responseItem)[0]; ",
													"        let properties = Object.keys(educationOrganizationAddresses); ",
													"        pm.expect(properties).to.have.members(['educationOrganizationAddresses']);",
													"     }",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56ea1be2-c7ea-429e-9e38-3983f3155376",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithCollections"
											]
										},
										"description": "# Unflattened reference -> collection\r\nScenario: Composite includes unflattened reference with collection\r\n    When building a composite resource for the \"StudentUnflattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have EmbeddedObject \"SchoolReference\" containing Collection \"EducationOrganizationAddresses\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes linked collection with properties Scenario",
							"item": [
								{
									"name": "Composite includes linked collection with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4390a5b4-b45d-4f57-9788-542b156c3465",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAcademicRecords' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have members 'cumulativeEarnedCredits','termDescriptor' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"     if(responseItem.schoolReference!==null)        ",
													"     {",
													"        const cumulativeEarnedCredits = Object.values(responseItem)[0]; ",
													"         __.each(cumulativeEarnedCredits, (cumulativeEarnedCredit) => {",
													"                let properties = Object.keys(cumulativeEarnedCredit); ",
													"                pm.expect(properties).to.have.members(['cumulativeEarnedCredits','termDescriptor']);",
													"         });",
													"     }",
													"     });",
													"     ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "427fa0e5-1858-45cd-bedf-5859c4714ec0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithProperties"
											]
										},
										"description": "# Linked collection -> properties\r\nScenario: Composite includes linked collection with properties\r\n    When building a composite resource for the \"StudentLinkedCollectionWithProperty\" composite \r\n    Then the composite resource should have Collection \"StudentAcademicRecords\" with only properties [CumulativeEarnedCredits, TermDescriptor]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Includes linked collection with collection Scenario",
							"item": [
								{
									"name": "Composite includes linked collection with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c323eeb-cdb8-4b47-9c60-2d3da2893c13",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'studentEducationOrganizationAssociations' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociations']);",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have members 'studentEducationOrganizationAssociationProgramParticipations' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"     if(responseItem.schoolReference!==null)        ",
													"     {",
													"        const cumulativeEarnedCredits = Object.values(responseItem)[0]; ",
													"         __.each(cumulativeEarnedCredits, (cumulativeEarnedCredit) => {",
													"                let properties = Object.keys(cumulativeEarnedCredit); ",
													"                pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationProgramParticipations']);",
													"         });",
													"     }",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ee68890-3ee1-4443-94ad-60fa98f28b97",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithCollections"
											]
										},
										"description": "# Linked collection -> collection\r\nScenario: Composite includes linked collection with collection\r\n    When building a composite resource for the \"StudentLinkedCollectionWithCollection\" composite \r\n    Then the composite resource should have Collection \"StudentEducationOrganizationAssociations\" with Collection \"StudentEducationOrganizationAssociationProgramParticipations\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Include flattened references with unflattened references",
							"item": [
								{
									"name": "Composites include flattened references with unflattened references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "542e237f-48fa-4e51-a143-ab400e98d68a",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'localEducationAgencyReference' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['localEducationAgencyReference']);",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"pm.test(\"Should the items return with have members 'educationServiceCenterId' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"     if(responseItem.localEducationAgencyReference!==null)        ",
													"     {",
													"        const educationServiceCenterId = Object.values(responseItem)[0]; ",
													"                let properties = Object.keys(educationServiceCenterId); ",
													"                pm.expect(properties).to.have.members(['educationServiceCenterId']);",
													"     }",
													"     });",
													"     ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1f86021-62f3-4f20-85cc-554089a9cf00",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferenceWithUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferenceWithUnflattenedReferences"
											]
										},
										"description": "# Flattened Reference -> Unflattened Reference\r\nScenario: Composites include flattened references with unflattened references\r\n    When building a composite resource for the \"StudentFlattenedReferenceWithUnflattenedReference\" composite \r\n    Then the composite resource should have EmbeddedObject \"LocalEducationAgencyReference\" with only the specific members [EducationServiceCenterId]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Include flattened references with linked collection Scenario",
							"item": [
								{
									"name": "Composites include flattened references with linked collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92cbd327-93b8-47fd-809b-f89f44da27b6",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection 'studentAssessments' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['studentAssessments']);",
													"         ",
													"     });",
													"     ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c42e98f-1e7e-4cea-aee3-129ca89101cc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferenceWithLinkedCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferenceWithLinkedCollections"
											]
										},
										"description": "# Flattened Reference -> Linked Collection\r\nScenario: Composites include flattened references with linked collection\r\n    When building a composite resource for the \"StudentFlattenedReferenceWithLinkedCollection\" composite \r\n    Then the composite resource should have Collection \"StudentAssessments\" with only properties [SerialNumber]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Include flattened references with collection Scenario",
							"item": [
								{
									"name": "Composites include flattened references with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da54a82-8842-4463-a388-d8ce88829726",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return some items for verification  \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"    pm.expect(responseItems.length).to.be.greaterThan(0);",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have Collection ''schoolCategories','schoolGradeLevels'' \", () => {",
													"    ",
													"    const responseItems = pm.response.json();",
													"   ",
													"      __.each(responseItems, (responseItem) => {",
													"       ",
													"        let properties = Object.keys(responseItem); ",
													"        pm.expect(properties).to.have.members(['schoolCategories','schoolGradeLevels']);",
													"         ",
													"     });",
													"     ",
													"});",
													"",
													"",
													"pm.test(\"Should the items return with have memebers ''schoolCategories','schoolGradeLevels',gradeLevelDescriptor'\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     const schoolCategoryDescriptor = Object.values(responseItems[0])[0]; ",
													"     ",
													"     properties = Object.keys(schoolCategoryDescriptor[0]); ",
													"     pm.expect(properties).to.have.members(['schoolCategoryDescriptor']);",
													"     ",
													"     properties = Object.keys(responseItems[1]); ",
													"     pm.expect(properties).to.have.members(['schoolCategories','schoolGradeLevels']);",
													"     ",
													"     const gradeLevelDescriptor = Object.values(responseItems[0])[1]; ",
													"     properties = Object.keys(gradeLevelDescriptor[0]); ",
													"     pm.expect(properties).to.have.members(['gradeLevelDescriptor']);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9fb77040-2d4c-419d-a0ec-4fd2900452c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SchoolFlattenedReferenceWithCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SchoolFlattenedReferenceWithCollections"
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    When building a composite resource for the \"SchoolFlattenedReferenceWithCollection\" composite \r\n    Then the composite resource should have Collection \"SchoolCategories\" with only properties [SchoolCategoryDescriptor]\r\n    And the composite resource should have Collection \"SchoolGradeLevels\" with only properties [GradeLevelDescriptor]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature:Composite resources can be defined through xml",
					"item": [
						{
							"name": "Initialize Known",
							"item": [
								{
									"name": "Initialize Known parents Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f436f0df-62a7-449b-b4f1-bd38dbd79c0e",
												"exec": [
													"const __ = require('lodash');\r",
													"\tconst responseItems = pm.response.json();\r",
													"\tconst testSubject = __.first(responseItems);\r",
													"\tpm.environment.set('known:parentId', testSubject.id);\r",
													"\t// Clear the id to prevent error on POST\r",
													"\ttestSubject.id = null;\r",
													"\t// Assign the address periods\r",
													"\tconst periods = []\r",
													"\tperiods.push({ beginDate: '2018-07-04' });\r",
													"\t__.each(testSubject.addresses, address => address.periods = periods);\r",
													"\t\r",
													"\t\r",
													"\tpm.environment.set('known:testSubject', JSON.stringify(testSubject));\r",
													"\t\r",
													"\t// Build request to update the Parent with address periods\r",
													"\tlet postRequest = {\r",
													"\t    method: 'POST',\r",
													"\t    url: pm.environment.get('ApiBaseUrl') + '/data/v3/ed-fi/parents',\r",
													"\t    header: {\r",
													"\t        'Content-Type': 'application/json',\r",
													"\t        'Authorization': 'Bearer ' + pm.environment.get('AccessToken')\r",
													"\t    },\r",
													"\t    body: {\r",
													"\t        mode: 'raw',\r",
													"\t        raw: JSON.stringify(testSubject)\r",
													"\t    }\r",
													"\t};\r",
													"\t// Update parent to assign address periods for the scenario\r",
													"\tpm.sendRequest(postRequest, (err, response) => {\r",
													"\t    if (err) {\r",
													"\t        console.log(JSON.stringify(err));\r",
													"\t    } else {\r",
													"\t        console.log(JSON.stringify(response));\r",
													"\t    }\r",
													"\t});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/parents",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"parents"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Specification does not define a parameter needed to properly filter the incoming request URL",
							"item": [
								{
									"name": "Composite resource specification does not define a parameter needed to properly filter the incoming request URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b1e2a87-5bfd-43d0-acdd-600f8b96ab2b",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 404\", () => {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "117ab286-cf61-42e7-93ca-1d5a5c900ab9",
												"exec": [
													"const uuid = require('uuid');",
													"pm.variables.set(\"supplied:subjectId\", uuid.v4());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/nonExistents /{{supplied:subjectId}}/studentProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"nonExistents ",
												"{{supplied:subjectId}}",
												"studentProperties"
											]
										},
										"description": "Scenario: Composite resource specification does not define a parameter needed to properly filter the incoming request URL\r\n    # For example - /api/v2.0/schools/{School.Id}/schools (request does not make sense - should not define \"School.Id\" parm in spec for \"School\" resource)\r\n    Given the subject of the request is an arbitrary id\r\n    When a GET (by id) request is submitted to the \"StudentProperty\" composite for the subject \"NonExistent\"\r\n    Then the response should indicate the resource was not found"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite base resource contains no properties Scenario",
							"item": [
								{
									"name": "Composite base resource contains no properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f25e44f0-53c5-4d72-9e61-683c064170d4",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with the member studentEducationOrganizationAssociationAddresses of base resource contains no properties\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);",
													"        everythingVerified = true;",
													"      });",
													"       pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "65f4b7c0-045c-4c55-a57e-a20d760e2ad1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/BaseResourceCanContainNoProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"BaseResourceCanContainNoProperties"
											]
										},
										"description": "# Base -> No Properties\r\nScenario: Composite base resource contains no properties\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"BaseResourceCanContainNoProperty\" composite\r\n    Then the response model should have only the specific members [studentEducationOrganizationAssociationAddresses]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite members include display names Scenario",
							"item": [
								{
									"name": "Composite members include display names",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e049dece-b43c-412e-b235-5d9bbba09b14",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with the include members with the display names\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['property1','collection1','linkedCollection1','linkedCollection2']);",
													"        everythingVerified = true;",
													"      });",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ba1f9708-ee76-476f-8818-1cfb8ae320d0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/MembersIncludeDisplayNames/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"MembersIncludeDisplayNames",
												""
											]
										},
										"description": "# Display names applied to all members\r\nScenario: Composite members include display names\r\n    Given the subject of the request is a school with student and staff associations\r\n    When a GET (by id) request is submitted to the \"MembersIncludeDisplayName\" composite\r\n    Then the response should include members with the display names [property1, collection1, linkedCollection1, unflattenedReference]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes specific collections Scenario",
							"item": [
								{
									"name": "Composite includes specific collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef1b079a-7bb6-47e0-b7bd-0537f07a7af0",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return an item with only the specific members of specific collections \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);",
													"        everythingVerified = true;",
													"      });",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "891004f3-6004-4ccc-946c-b3e05415e88a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollections"
											]
										},
										"description": "# Base -> Collections\r\nScenario: Composite includes specific collections\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentEducationOrganizationAssociationCollection\" composite\r\n    Then the response model should have only the specific members [studentEducationOrganizationAssociationAddresses]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes specific linked collections Scenario",
							"item": [
								{
									"name": "Composite includes specific linked collections",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c408ccde-85cf-4c6f-a448-4bdb43aaf277",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Should return an item with specific members of specific linked collections\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        everythingVerified = true;",
													"      });",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bd36bf26-5388-42c0-a4be-a8d82c39b72e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollections"
											]
										},
										"description": "# Base -> Linked Collections\r\nScenario: Composite includes specific linked collections\r\n    Given the subject of the request is a student with a StudentAcademicRecord\r\n    When a GET (by id) request is submitted to the \"StudentLinkedCollection\" composite\r\n    Then the response model should have only the specific members [studentAcademicRecords]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes specific properties Scenario",
							"item": [
								{
									"name": "Composite includes specific properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11ecfcca-068b-46e1-83ad-d7bf230440c2",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Should return an item with specific properties\", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentUniqueId','firstName','lastSurname','birthDate']);",
													"        everythingVerified = true;",
													"      });",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b861187a-e9bd-4f8f-a8ef-483915457b8a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentProperties",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentProperties"
											]
										},
										"description": "# Base -> Properties\r\nScenario: Composite includes specific properties\r\n    Given the subject of the request is a student with values in all name properties\r\n    When a GET (by id) request is submitted to the \"StudentProperty\" composite\r\n    Then the response model should have only the specific members [studentUniqueId, firstName, lastSurname, birthDate]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7debdcf-fc1c-4156-8e29-4b89ce5cc29c",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return an item with the included member of an unflattened reference of an unflattened reference\", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentReference']);",
													"        ",
													"        if (responseItem.studentReference) {",
													"            let properties = Object.keys(responseItem.studentReference);",
													"            ",
													"            if (properties.length == 3) {",
													"                pm.expect(properties).to.have.members(['firstName','lastSurname','middleName']);",
													"                everythingVerified = true;",
													"            }",
													"        }",
													"    });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "08d22d48-daa9-4960-9559-42da4a6448d4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentSchoolUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentSchoolUnflattenedReferences"
											]
										},
										"description": "# Base -> Unflattened Reference\r\nScenario: Composite includes unflattened reference\r\n    Given the subject of the request is a StudentSchoolAssociation\r\n    When a GET (by id) request is submitted to the \"StudentSchoolUnflattenedReference\" composite\r\n    Then the response model should have only unflattened member studentReference with properties [firstName,middleName,lastSurname]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63eca8b4-5b59-49ef-ba0a-67819cee0c20",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with specific members of flattened reference \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        ",
													"        if (properties.length == 3) {",
													"            pm.expect(properties).to.have.members(['firstName','lastSurname','middleName']);",
													"            everythingVerified = true;",
													"        }",
													"      });",
													"      ",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d436077-6c89-4008-a8bf-c96044e99685",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentSchoolFlattenedReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentSchoolFlattenedReferences",
												""
											]
										},
										"description": "# Base -> Flattened Reference\r\nScenario: Composite includes flattened reference\r\n    Given the subject of the request is a StudentSchoolAssociation\r\n    When a GET (by id) request is submitted to the \"StudentSchoolFlattenedReference\" composite\r\n    Then the response model should have only the specific members [firstName,middleName,lastSurname]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes specific references with flattened properties Scenario",
							"item": [
								{
									"name": "Composite includes specific references with flattened properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac13c992-bdeb-4cba-82f9-17b49119da87",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with flattened properties of specific reference \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['firstName']);",
													"        everythingVerified = true;",
													"      });",
													"      ",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c10a695d-cc95-4ca9-bbb4-a8cb7ae9accf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferencesWithProperties/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferencesWithProperties",
												""
											]
										},
										"description": "# Unflattened Reference -> Properties\r\nScenario: Composite includes specific references with properties\r\n    Given the subject of the request is a StudentSchoolAssociation with StudentAssessment\r\n    When a GET (by id) request is submitted to the \"StudentUnflattenedReferenceWithProperty\" composite\r\n    Then the response model should have only the specific member properties [firstName] from the studentReference\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes specific references with properties scenario",
							"item": [
								{
									"name": "Composite includes specific references with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "520683c5-9170-4aaf-9eb1-35aeb53be4ce",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return an item with  properties of specific reference \", () => {",
													"    ",
													"     const responseItems = pm.response.json();",
													"     let everythingVerified = false;",
													"     ",
													"      __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentReference']);",
													"    ",
													"        if (responseItem.studentReference) {",
													"            let properties = Object.keys(responseItem.studentReference);",
													"            pm.expect(properties).to.have.members(['firstName']);",
													"            everythingVerified = true;",
													"        }",
													"      });",
													"      ",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2adef622-72b6-4f4c-a295-1de3340206e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithProperties/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithProperties",
												""
											]
										},
										"description": "# Unflattened Reference -> Properties\r\nScenario: Composite includes specific references with properties\r\n    Given the subject of the request is a StudentSchoolAssociation with StudentAssessment\r\n    When a GET (by id) request is submitted to the \"StudentUnflattenedReferenceWithProperty\" composite\r\n    Then the response model should have only the specific member properties [firstName] from the studentReference\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites include flattened references with flattened references Scenario",
							"item": [
								{
									"name": "Composites include flattened references with flattened references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6da197ea-abb4-41b9-bb9a-4beeb5ad266c",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with flattened properties of flattened references with flattened references \", () => {\r",
													"    \r",
													"     const responseItems = pm.response.json();\r",
													"     let everythingVerified = false;\r",
													"     \r",
													"      __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['localEducationAgencyCategoryDescriptor']);\r",
													"        everythingVerified = true;\r",
													"      });\r",
													"     \r",
													"      pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c9ea7e7-b163-4291-bb89-86fbaab856e4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferenceWithFlattenedReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferenceWithFlattenedReferences",
												""
											]
										},
										"description": "# Flattened Reference -> Flattened Reference\r\nScenario: Composites include flattened references with flattened references\r\n    Given the subject of the request is a StudentSchoolAssociation with School\r\n    When a GET (by id) request is submitted to the \"StudentFlattenedReferenceWithFlattenedReference\" composite\r\n    Then the response model should have only flattened properties [charterStatusDescriptor]\r\n    And the queries generated should all match previously approved values\r\n    \r\n    \r\n    For \"StudentFlattenedReferenceWithFlattenedReference\", change the CharterStatusDescriptor to be LocalEducationAgencyCategoryDescriptor:\r\n\t<Composite name=\"StudentFlattenedReferenceWithFlattenedReference\">\r\n        <BaseResource name=\"StudentSchoolAssociation\">\r\n          <ReferencedResource name=\"SchoolReference\" flatten=\"false\">\r\n            <ReferencedResource name=\"LocalEducationAgencyReference\" flatten=\"true\">\r\n              <Property name=\"CharterStatusDescriptor\" />\r\n            </ReferencedResource>\r\n          </ReferencedResource>\r\n        </BaseResource>\r\n      </Composite>"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes linked collection containing a linked collection Scenario",
							"item": [
								{
									"name": "Composite includes linked collection containing a linked collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c83fcaac-6b4a-4f29-9581-96078fb56279",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"",
													"",
													"pm.test(\"Should return an item with  only Linked Collection  with Linked Collection \", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        ",
													"        __.each(responseItem.studentAcademicRecords, studentAcademicRecord => {",
													"        let properties = Object.keys(studentAcademicRecord); ",
													"        pm.expect(properties).to.have.members(['courseTranscripts']);",
													"        everythingVerified = true;",
													"        ",
													"     });",
													"    });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b76db0f-16bd-42e4-91cc-151fb8835a37",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithLinkedCollections/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithLinkedCollections",
												""
											]
										},
										"description": "# Linked Collection -> Linked Collection\r\nScenario: Composite includes linked collection containing a linked collection\r\n    Given the subject of the request is a student with a StudentAcademicRecord\r\n    When a GET (by id) request is submitted to the \"StudentLinkedCollectionWithLinkedCollection\" composite\r\n    Then the response model should have only Linked Collection studentAcademicRecords with Linked Collection courseTranscripts\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes linked collection containing flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes linked collection containing flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea22d865-f85d-4dbc-a791-e1ea5512fb48",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with only Linked Collection with flattened member properties  \", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        ",
													"        __.each(responseItem.studentAcademicRecords, studentAcademicRecord => {",
													"            let properties = Object.keys(studentAcademicRecord); ",
													"            pm.expect(properties).to.have.members(['schoolYear']);",
													"            everythingVerified = true;",
													"         });",
													"    });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "864d0964-80b2-49c5-bbbd-2819f9943390",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithFlattenedPropertyReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithFlattenedPropertyReferences",
												""
											]
										},
										"description": "# Linked Collection -> Flattened Reference\r\nScenario: Composite includes linked collection containing flattened reference\r\n    Given the subject of the request is a student with a StudentAcademicRecord\r\n    When a GET (by id) request is submitted to the \"StudentLinkedCollectionWithFlattenedPropertyReference\" composite\r\n    Then the response model should have only Linked Collection studentAcademicRecords with flattened member properties [schoolYear]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes linked collection containing unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes linked collection containing unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "279f09da-f341-4679-b1b3-884d2d0b847b",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return an item with only  Linked Collection  containing member  with unflattened member properties  \", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);",
													"        ",
													"        __.each(responseItem.studentAcademicRecords, studentAcademicRecord => {",
													"            let properties = Object.keys(studentAcademicRecord); ",
													"            pm.expect(properties).to.have.members(['schoolYearTypeReference']);",
													"        ",
													"            if (studentAcademicRecord.schoolYearTypeReference) {",
													"               let properties = Object.keys(studentAcademicRecord.schoolYearTypeReference); ",
													"                pm.expect(properties).to.have.members(['schoolYear']);",
													"                everythingVerified = true;",
													"            }",
													"       });",
													"     });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1daeaf90-2d57-49c0-8fb8-10e966433e41",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithUnflattenedReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithUnflattenedReferences",
												""
											]
										},
										"description": "# Linked Collection -> Unflattened Reference\r\nScenario: Composite includes linked collection containing unflattened reference\r\n    Given the subject of the request is a student with a StudentAcademicRecord\r\n    When a GET (by id) request is submitted to the \"StudentLinkedCollectionWithUnflattenedReference\" composite\r\n    Then the response model should have only Linked Collection studentAcademicRecords containing member schoolYearTypeReference with unflattened member properties [schoolYear]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes flattened reference with linked collection Scenario",
							"item": [
								{
									"name": "Composite includes flattened reference with linked collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3046dd0b-2335-48fb-95a3-805ca970ef88",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with only flattened reference with Linked Collection\", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentReference']);",
													"        ",
													"        if (responseItem.studentReference) {",
													"            let properties = Object.keys(responseItem.studentReference); ",
													"            pm.expect(properties).to.have.members(['studentAssessments']);",
													"            everythingVerified = true;",
													"        }",
													"     });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f97fe9a0-85c9-4005-a62c-48cfc54a24ee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithLinkedCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithLinkedCollections"
											]
										},
										"description": "# Unflattened Reference -> Linked Collection\r\nScenario: Composite includes flattened reference with linked collection\r\n    Given the subject of the request is a StudentSchoolAssociation with StudentAssessment\r\n    When a GET (by id) request is submitted to the \"StudentUnflattenedReferenceWithLinkedCollection\" composite\r\n    Then the response model should have only reference studentReference with Linked Collection studentAssessments\r\n    And the queries generated should all match previously approved values\r\n    \r\n    \r\n    For \"StudentUnflattenedReferenceWithLinkedCollection\", change the SerialNumber to be StudentAssessmentIdentifier:\r\n\t\r\n<Composite name=\"StudentUnflattenedReferenceWithLinkedCollection\">\r\n        <BaseResource name=\"StudentSchoolAssociation\">\r\n          <ReferencedResource name=\"StudentReference\" flatten=\"false\">\r\n            <LinkedCollection name=\"StudentAssessments\">\r\n              <Property name=\"StudentAssessmentIdentifier\" />\r\n            </LinkedCollection>\r\n          </ReferencedResource>\r\n        </BaseResource>\r\n      </Composite>"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes unflattened reference with unflattened reference Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference with unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e286389-fe74-40f0-ba53-faa6dd0665d7",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Should return an item with the included member of an unflattened reference of an unflattened reference\", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['schoolReference']);",
													"        ",
													"        if (responseItem.schoolReference) {",
													"            let properties = Object.keys(responseItem.schoolReference);",
													"            pm.expect(properties).to.have.members(['localEducationAgencyReference']);",
													"            ",
													"            if (responseItem.schoolReference.localEducationAgencyReference) {",
													"                let properties = Object.keys(responseItem.schoolReference.localEducationAgencyReference);",
													"                pm.expect(properties).to.have.members(['localEducationAgencyCategoryDescriptor']);",
													"",
													"                everythingVerified = true;",
													"            }",
													"        }",
													"    });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fbca0cbf-7ba9-40a2-8ba7-01295480ca72",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithUnflattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithUnflattenedReferences"
											]
										},
										"description": "# Unflattened Reference -> Unflattened Reference\r\nScenario: Composite includes unflattened reference with unflattened reference\r\n    Given the subject of the request is a StudentSchoolAssociation with School\r\n    When a GET (by id) request is submitted to the \"StudentUnflattenedReferenceWithUnflattenedReference\" composite\r\n    Then the response model should contain only unflattened member schoolReference with unflattened member localEducationAgencyReference\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes collection with properties Scenario",
							"item": [
								{
									"name": "Composite includes collection with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "deef2c81-ba2e-42c0-b107-6dd825fadf2e",
												"exec": [
													"const __ = require('lodash');",
													"",
													"pm.test(\"Status code is 200\", () => {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Should return an item with only collection with properties\", () => {",
													"   let everythingVerified = false;",
													"   const responseItems = pm.response.json();",
													" ",
													"    __.each(responseItems, responseItem => {",
													"        let properties = Object.keys(responseItem);",
													"        pm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);",
													"        ",
													"        __.each(responseItem.studentEducationOrganizationAssociationAddresses, studentEducationOrganizationAssociationAddress => {",
													"            let properties = Object.keys(studentEducationOrganizationAssociationAddress); ",
													"            pm.expect(properties).to.have.members(['addressTypeDescriptor','city','postalCode','stateAbbreviationDescriptor','streetNumberName']);",
													"            everythingVerified = true;",
													"        });",
													"    });",
													"    ",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "035ee791-6a70-4735-8c2d-a263e4ca860b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollectionWithProperties/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollectionWithProperties",
												""
											]
										},
										"description": "# Collection -> Properties \r\nScenario: Composite includes collection with properties\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentEducationOrganizationAssociationCollectionWithProperty\" composite\r\n    Then the response model should have only collection studentEducationOrganizationAssociationAddresses with properties [addressTypeDescriptor,streetNumberName,city,stateAbbreviationDescriptor,postalCode]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes collection with collection scenario",
							"item": [
								{
									"name": "Composite includes collection with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "882e4489-ca63-46f7-b86f-0db1bdc82e5b",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with child collection of the child collection with the included member  \", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItem = pm.response.json();\r",
													" \r",
													"    let properties = Object.keys(responseItem);\r",
													"    pm.expect(properties).to.have.members(['parentAddresses']);\r",
													"        \r",
													"    __.each(responseItem.parentAddresses, parentAddress => {\r",
													"        let properties = Object.keys(parentAddress); \r",
													"        console.log(properties);\r",
													"        pm.expect(properties).to.have.members(['parentAddressPeriods']);\r",
													"                \r",
													"        if (parentAddress.parentAddressPeriods)\r",
													"        {\r",
													"             __.each(parentAddress.parentAddressPeriods, period => {\r",
													"                let properties = Object.keys(period);\r",
													"                pm.expect(properties).to.have.members(['beginDate']);\r",
													"                everythingVerified = true;\r",
													"            });\r",
													"        }\r",
													"    });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6a447bb6-3cd6-414d-a2b1-86c9224878f4",
												"exec": [
													"const parentId = pm.environment.get(\"known:parentId\");\r",
													"pm.variables.set(\"supplied:parentId\", parentId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/ResourceWithCollectionWithCollection/{{supplied:parentId}}",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"ResourceWithCollectionWithCollection",
												"{{supplied:parentId}}"
											]
										},
										"description": "# Collection -> Collection\r\nScenario: Composite includes collection with collection\r\n    Given the subject of the request is a StudentAssessment with ObjectAssessmentScoreResults\r\n    When a GET (by id) request is submitted to the \"StudentCollectionWithCollection\" composite\r\n    Then the response model should have only collection studentAssessmentStudentObjectiveAssessments with collection studentAssessmentStudentObjectiveAssessmentScoreResults\r\n    And the queries generated should all match previously approved values\r\n    \r\n    \r\n    ++++++++++++++++++++++++++++\r\n\tI would recommend changing this composite to go after Parent, ParentAddress, and ParentAddressPeriod.\r\n\t\r\n\t <Composite name=\"ResourceWithCollectionWithCollection\">\r\n        <BaseResource name=\"Parent\">\r\n          <Collection name=\"ParentAddresses\">\r\n            <Collection name=\"ParentAddressPeriods\">\r\n              <Property name=\"BeginDate\" />\r\n            </Collection>\r\n          </Collection>\r\n        </BaseResource>\r\n      </Composite>\r\n\t+++++++++++++++++++++++++++++++++"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes collection with unflattened reference scenario",
							"item": [
								{
									"name": "Composite includes collection with unflattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be19c4e0-44a3-4bad-8a9a-c057a4b9068e",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with collection  with flattened member  and properties of unflattened reference \", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItems = pm.response.json();\r",
													" \r",
													"    __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['sessionGradingPeriods']);\r",
													"        \r",
													"        __.each(responseItem.sessionGradingPeriods, sessionGradingPeriod => {\r",
													"            let properties = Object.keys(sessionGradingPeriod); \r",
													"            pm.expect(properties).to.have.members(['gradingPeriodReference']);\r",
													"\r",
													"            if (sessionGradingPeriod.gradingPeriodReference) {\r",
													"                let properties = Object.keys(sessionGradingPeriod.gradingPeriodReference);\r",
													"                pm.expect(properties).to.have.members(['beginDate']);\r",
													"                everythingVerified = true;\r",
													"            }\r",
													"        });\r",
													"    });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f36ad13-4149-419a-aa9e-59c80f2c6ac5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/ResourceCollectionWithUnflattenedReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"ResourceCollectionWithUnflattenedReferences",
												""
											]
										},
										"description": "# Collection -> Unflattened reference\r\nScenario: Composite includes collection with unflattened reference\r\n    Given the subject of the request is a StudentAssessment with StudentAssessmentStudentObjectiveAssessment\r\n    When a GET (by id) request is submitted to the \"StudentCollectionWithUnflattenedReference\" composite\r\n    Then the response model should have only collection studentAssessmentStudentObjectiveAssessments with flattened member objectiveAssessmentReference and properties [maxRawScore]\r\n    And the queries generated should all match previously approved values\r\n    \r\n     <Composite name=\"ResourceCollectionWithUnflattenedReference\">\r\n  <BaseResource name=\"Session\">\r\n    <Collection name=\"SessionGradingPeriods\">\r\n      <ReferencedResource name=\"GradingPeriodReference\" flatten=\"false\">\r\n        <Property name=\"BeginDate\" />\r\n      </ReferencedResource>\r\n    </Collection>\r\n  </BaseResource>\r\n</Composite>"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes collection with flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes collection with flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8383a917-8f03-4e6c-b073-412a7f13433d",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only collection  with properties of flattened reference \", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItems = pm.response.json();\r",
													" \r",
													"    __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['sessionGradingPeriods']);\r",
													"        \r",
													"        __.each(responseItem.sessionGradingPeriods, sessionGradingPeriod => {\r",
													"            \r",
													"            let properties = Object.keys(sessionGradingPeriod); \r",
													"            pm.expect(properties).to.have.members(['beginDate']);\r",
													"            everythingVerified = true;\r",
													"              \r",
													"        });\r",
													"     });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b41ebe78-fc7c-460e-a04d-3d3eb1df5eec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/ResourceCollectionWithFlattenedReferences",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"ResourceCollectionWithFlattenedReferences"
											]
										},
										"description": "# Collection -> Flattened reference\r\nScenario: Composite includes collection with flattened reference\r\n    Given the subject of the request is a StudentAssessment with StudentAssessmentStudentObjectiveAssessment\r\n    When a GET (by id) request is submitted to the \"StudentCollectionWithFlattenedReference\" composite\r\n    Then the response model should have only collection studentAssessmentStudentObjectiveAssessments with properties [maxRawScore]\r\n    And the queries generated should all match previously approved values\r\n    \r\n   <Composite name=\"ResourceCollectionWithFlattenedReference\">\r\n  <BaseResource name=\"Session\">\r\n    <Collection name=\"SessionGradingPeriods\">\r\n      <ReferencedResource name=\"GradingPeriodReference\" flatten=\"true\">\r\n        <Property name=\"BeginDate\" />\r\n      </ReferencedResource>\r\n    </Collection>\r\n  </BaseResource>\r\n</Composite>"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes unflattened reference with flattened reference Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference with flattened reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96872b4a-d553-42c2-97e1-371ac9557815",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only unflattened member  with flattened member of flattened reference \", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItems = pm.response.json();\r",
													" \r",
													"    __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['schoolReference']);\r",
													"        \r",
													"        __.each(responseItem.schoolReference, schoolReference => {\r",
													"            \r",
													"            let properties = Object.keys(responseItem.schoolReference); \r",
													"            pm.expect(properties).to.have.members(['localEducationAgencyCategoryDescriptor']);\r",
													"            everythingVerified = true;\r",
													"              \r",
													"        });\r",
													"     });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cbcf23e2-f37a-4b8c-976d-3149fbbcd13d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithflattenedReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithflattenedReferences",
												""
											]
										},
										"description": "# Unflattened reference -> flattened reference\r\nScenario: Composite includes unflattened reference with flattened reference\r\n    Given the subject of the request is a StudentSchoolAssociation with School\r\n    When a GET (by id) request is submitted to the \"StudentUnflattenedReferenceWithflattenedReference\" composite\r\n    Then the response model should have only unflattened member schoolReference with flattened member localEducationAgencyReference\r\n    And the queries generated should all match previously approved values\r\n\t\r\n\t\r\n\t++++++++++++++++++++++++++++++++++++++++++++\r\n\tFor \"StudentUnflattenedReferenceWithflattenedReference\", change the CharterStatusDescriptor to be LocalEducationAgencyCategoryDescriptor:\r\n\t<Composite name=\"StudentUnflattenedReferenceWithflattenedReference\">\r\n        <BaseResource name=\"StudentSchoolAssociation\">\r\n          <ReferencedResource name=\"SchoolReference\" flatten=\"false\">\r\n            <ReferencedResource name=\"LocalEducationAgencyReference\" flatten=\"true\">\r\n              <Property name=\"CharterStatusDescriptor\" />\r\n            </ReferencedResource>\r\n          </ReferencedResource>\r\n        </BaseResource>\r\n      </Composite>"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes unflattened reference with collection Scenario",
							"item": [
								{
									"name": "Composite includes unflattened reference with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e246ea5-4462-4250-a9b6-da3bde8227dd",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only  unflattened member  with collection \", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItems = pm.response.json();\r",
													" \r",
													"    __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['schoolReference']);\r",
													"        \r",
													"                __.each(responseItem.schoolReference, schoolReference => {\r",
													"                    \r",
													"                    let properties = Object.keys(responseItem.schoolReference); \r",
													"                    pm.expect(properties).to.have.members(['educationOrganizationAddresses']);\r",
													"                    everythingVerified = true;\r",
													"                      \r",
													"                  });\r",
													"     });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "637e4931-f8a5-4645-a232-8801e297759a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentUnflattenedReferenceWithCollection/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentUnflattenedReferenceWithCollection",
												""
											]
										},
										"description": "# Unflattened reference -> collection\r\nScenario: Composite includes unflattened reference with collection\r\n    Given the subject of the request is a StudentSchoolAssociation with School\r\n    When a GET (by id) request is submitted to the \"StudentUnflattenedReferenceWithCollection\" composite\r\n    Then the response model should have only unflattened member schoolReference with collection educationOrganizationAddresses\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes linked collection with properties Scenario",
							"item": [
								{
									"name": "Composite includes linked collection with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24915fd6-66f9-4eb7-9e76-2788ac5f5f93",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only linked collection with properties \", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItems = pm.response.json();\r",
													" \r",
													"    __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['studentAcademicRecords']);\r",
													"        \r",
													"                __.each(responseItem.studentAcademicRecords, studentAcademicRecord => {\r",
													"                    \r",
													"                    let properties = Object.keys(studentAcademicRecord); \r",
													"                   pm.expect(properties).to.have.members(['cumulativeEarnedCredits','termDescriptor']);\r",
													"                    everythingVerified = true;\r",
													"                      \r",
													"                  });\r",
													"     });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdc83adc-bac8-4b6d-8ad6-0160135b136a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentLinkedCollectionWithProperties/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentLinkedCollectionWithProperties",
												""
											]
										},
										"description": "# Linked collection -> properties\r\nScenario: Composite includes linked collection with properties\r\n    Given the subject of the request is a student with a StudentSchoolAssociation\r\n    When a GET (by id) request is submitted to the \"StudentLinkedCollectionWithProperty\" composite\r\n    Then the response model should have only linked collection studentAcademicRecords with properties [cumulativeEarnedCredits,termDescriptor]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes linked collection with collection Scenario",
							"item": [
								{
									"name": "Composite includes linked collection with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90a79550-4a60-4a82-b25b-c704a9adb7fc",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only  linked collection  with collection\", () => {\r",
													"   let everythingVerified = false;\r",
													"   const responseItems = pm.response.json();\r",
													" \r",
													"    __.each(responseItems, responseItem => {\r",
													"        let properties = Object.keys(responseItem);\r",
													"        pm.expect(properties).to.have.members(['assessmentItems']);\r",
													"        \r",
													"                __.each(responseItem.assessmentItems, assessmentItem => {\r",
													"                    \r",
													"                    let properties = Object.keys(assessmentItem); \r",
													"                   pm.expect(properties).to.have.members(['assessmentItemLearningStandards']);\r",
													"                    everythingVerified = true;\r",
													"                      \r",
													"                  });\r",
													"     });\r",
													"    \r",
													"    pm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c87b8992-22d3-4fbd-a739-08e6f3a1ba1d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/ResourceLinkedCollectionWithCollections",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"ResourceLinkedCollectionWithCollections"
											]
										},
										"description": "# Linked collection -> collection\r\nScenario: Composite includes linked collection with collection\r\n    Given the subject of the request is a student with a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentLinkedCollectionWithCollection\" composite\r\n    Then the response model should have only linked collection studentEducationOrganizationAssociations with collection studentEducationOrganizationAssociationProgramParticipations\r\n    And the queries generated should all match previously approved values\r\n    \r\n    <Composite name=\"ResourceLinkedCollectionWithCollection\">\r\n       <BaseResource name=\"Assessment\">\r\n         <LinkedCollection name=\"AssessmentItems\">\r\n           <Collection name=\"AssessmentItemLearningStandards\">\r\n             <Property name=\"LearningStandardId\" />\r\n           </Collection>\r\n         </LinkedCollection>\r\n       </BaseResource>\r\n     </Composite>"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites include flattened references with unflattened references Scenario",
							"item": [
								{
									"name": "Composites include flattened references with unflattened references",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41811329-3c88-4d58-abe1-ea6b9482a42a",
												"exec": [
													"const __ = require('lodash');\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only  unflattened member with properties \", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['localEducationAgencyReference']);\r",
													"\r",
													"\r",
													"\t\tif (responseItem.localEducationAgencyReference) {\r",
													"\t\t\tlet properties = Object.keys(responseItem.localEducationAgencyReference);\r",
													"\t\t\tpm.expect(properties).to.have.members(['educationServiceCenterId']);\r",
													"\t\t\teverythingVerified = true;\r",
													"\t\t}\r",
													"\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1ea8e4a-a789-4f4f-b1aa-8e8cdf1473be",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferenceWithUnflattenedReferences/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferenceWithUnflattenedReferences",
												""
											]
										},
										"description": "# Flattened Reference -> Unflattened Reference\r\nScenario: Composites include flattened references with unflattened references\r\n    Given the subject of the request is a StudentSchoolAssociation with School\r\n    When a GET (by id) request is submitted to the \"StudentFlattenedReferenceWithUnflattenedReference\" composite\r\n    Then the response model should have only unflattened member localEducationAgencyReference with properties [educationServiceCenterId]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites include flattened references with linked collection Scenario",
							"item": [
								{
									"name": "Composites include flattened references with linked collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b94de852-aaf6-441a-a2f5-8caeccd787a9",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Should return an item with only  linked collection  with properties\", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['studentAssessments']);\r",
													"\r",
													"\t\t__.each(responseItem.studentAssessments, studentAssessment => {\r",
													"\r",
													"\t\t\tlet properties = Object.keys(studentAssessment);\r",
													"\t\t\tpm.expect(properties).to.have.members(['studentAssessmentIdentifier']);\r",
													"\t\t\teverythingVerified = true;\r",
													"\r",
													"\t\t});\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85384069-054e-42b5-a5fd-da4d826b6ae5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentFlattenedReferenceWithLinkedCollections/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentFlattenedReferenceWithLinkedCollections",
												""
											]
										},
										"description": "# Flattened Reference -> Linked Collection\r\nScenario: Composites include flattened references with linked collection\r\n    Given the subject of the request is a StudentSchoolAssociation with School and StudentAssessment\r\n    When a GET (by id) request is submitted to the \"StudentFlattenedReferenceWithLinkedCollection\" composite\r\n    Then the response model should have only linked collection studentAssessments with properties [serialNumber]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites include flattened references with collection Scenario",
							"item": [
								{
									"name": "Composites include flattened references with collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdb48f0c-040a-412a-accb-84d2eaa92749",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with collection  with properties of flattened references\", () => {\r",
													"\tlet everythingVerifiedCollection1 = false;\r",
													"\tlet everythingVerifiedCollection2 = false;\r",
													"\t\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['schoolCategories', 'schoolGradeLevels']);\r",
													"\r",
													"\t\t__.each(responseItem.schoolCategories, schoolCategory => {\r",
													"\t\t\tlet properties = Object.keys(schoolCategory);\r",
													"\t\t\tpm.expect(properties).to.have.members(['schoolCategoryDescriptor']);\r",
													"\t\t\teverythingVerifiedCollection1 = true;\r",
													"\t\t});\r",
													"\r",
													"\t\t__.each(responseItem.schoolGradeLevels, schoolGradeLevel => {\r",
													"\t\t\tlet properties = Object.keys(schoolGradeLevel);\r",
													"\t\t\tpm.expect(properties).to.have.members(['gradeLevelDescriptor']);\r",
													"\t\t\teverythingVerifiedCollection2 = true;\r",
													"\t\t});\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerifiedCollection1, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"\tpm.expect(everythingVerifiedCollection2, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82de9d72-14a0-4a07-a51b-7202a6348f62",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/SchoolFlattenedReferenceWithCollections/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"SchoolFlattenedReferenceWithCollections",
												""
											]
										},
										"description": "# Flattened Reference -> Collection\r\nScenario: Composites include flattened references with collection\r\n    Given the subject of the request is a StudentSchoolAssociation with School\r\n    When a GET (by id) request is submitted to the \"SchoolFlattenedReferenceWithCollection\" composite\r\n    Then the response model should have collection schoolCategories with properties [schoolCategoryDescriptor]\r\n    And the response model should have collection schoolGradeLevels with properties [gradeLevelDescriptor]\r\n    And the queries generated should all match previously approved values"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites include unflattened embedded objects Scenario",
							"item": [
								{
									"name": "Composites include unflattened embedded objects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5615f890-cf23-47a0-8f9b-40acd8f397e9",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with only unflattened member  with properties of unflattened embedded objects\", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['assessmentContentStandard']);\r",
													"\r",
													"\t\t__.each(responseItem.assessmentContentStandard, assessmentContentStandard => {\r",
													"\r",
													"\t\t\tlet properties = Object.keys(assessmentContentStandard);\r",
													"\t\t\tpm.expect(properties).to.have.members(['title']);\r",
													"\t\t\teverythingVerified = true;\r",
													"\r",
													"\t\t});\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "511c76da-ab80-4a21-aed5-9a8388ebcaec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/BaseAssessmentUnflattenedEmbeddedObjects/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"BaseAssessmentUnflattenedEmbeddedObjects",
												""
											]
										},
										"description": "# Base -> Unflattened Object - Covered\r\nScenario: Composites include unflattened embedded objects\r\n    Given the subject of the request is an Assessment composite with AssessmentContentStandard\r\n    When a GET (by id) request is submitted to the \"BaseAssessmentUnflattenedEmbeddedObject\" composite\r\n    Then the response model should have only unflattened member assessmentContentStandard with properties [title,publicationDate]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composites include flattened embedded objects Scenario",
							"item": [
								{
									"name": "Composites include flattened embedded objects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a34b9896-4321-48d6-8f7c-e771d96c245d",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with only  specific member of flattened embedded objects\", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['title']);\r",
													"\t\teverythingVerified = true;\r",
													"\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d840fa1-5d11-427f-8d68-0e04402837b8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/BaseAssessmentFlattenedEmbeddedObjects/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"BaseAssessmentFlattenedEmbeddedObjects",
												""
											]
										},
										"description": "# Base -> Flattened Object - Covered\r\nScenario: Composites include flattened embedded objects\r\n    Given the subject of the request is an Assessment composite with AssessmentContentStandard\r\n    When a GET (by id) request is submitted to the \"BaseAssessmentFlattenedEmbeddedObject\" composite\r\n    Then the response model should have only the specific members [title,publicationDate]"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes unflattened object with properties Scenario",
							"item": [
								{
									"name": "Composite includes unflattened object with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e53fd30e-91d3-4092-ac36-5e0e6e1ee532",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with only specific  member  with properties of unflattened objects\", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['assessmentContentStandard']);\r",
													"\r",
													"\t\t__.each(responseItem.assessmentContentStandard, assessmentContentStandard => {\r",
													"\r",
													"\t\t\tlet properties = Object.keys(assessmentContentStandard);\r",
													"\t\t\tpm.expect(properties).to.have.members(['title']);\r",
													"\t\t\teverythingVerified = true;\r",
													"\r",
													"\t\t});\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2833c27-7447-40ef-956f-7074006e7409",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/UnflattenedEmbeddedObjectWithProperty/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"UnflattenedEmbeddedObjectWithProperty",
												""
											]
										},
										"description": "#Unflattened Object -> Property - Covered\r\nScenario: Composite includes unflattened object with properties\r\n    Given the subject of the request is an Assessment composite with AssessmentContentStandard\r\n    When a GET (by id) request is submitted to the \"UnflattenedEmbeddedObjectWithProperty\" composite\r\n    Then the response model should have only the specific member properties [title,publicationDate,uri,beginDate] from the assessmentContentStandard"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite includes flattened object with properties Scenario",
							"item": [
								{
									"name": "Composite includes flattened object with properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b76cda0-ea92-4dd3-8664-3e37588d264b",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with only specific  member  with properties of flattened object\", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['title']);\r",
													"\t\teverythingVerified = true;\r",
													"\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "faf94b0f-24a1-47a8-a1fb-f6a84d40886e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/FlattenedEmbeddedObjectWithProperty/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"FlattenedEmbeddedObjectWithProperty",
												""
											]
										},
										"description": "#Unflattened Object -> Property - Covered\r\nScenario: Composite includes unflattened object with properties\r\n    Given the subject of the request is an Assessment composite with AssessmentContentStandard\r\n    When a GET (by id) request is submitted to the \"UnflattenedEmbeddedObjectWithProperty\" composite\r\n    Then the response model should have only the specific member properties [title,publicationDate,uri,beginDate] from the assessmentContentStandard"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Composite is requested for a Student to check the order of the response properties Scenario",
							"item": [
								{
									"name": "Composite is requested for a Student to check the order of the response properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4c4e35-2c83-4772-87d8-84e75bc26fc9",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return an item with only specific members [addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode] in that order\", () => {\r",
													"\tlet everythingVerified = false;\r",
													"\tconst responseItems = pm.response.json();\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['studentEducationOrganizationAssociationAddresses']);\r",
													"\r",
													"\t\t__.each(responseItem.studentEducationOrganizationAssociationAddresses, studentEducationOrganizationAssociationAddress => {\r",
													"\r",
													"\t\t\tlet properties = Object.keys(studentEducationOrganizationAssociationAddress);\r",
													"\t\t\tpm.expect(properties).to.have.members(['addressTypeDescriptor', 'streetNumberName', 'city', 'stateAbbreviationDescriptor', 'postalCode']);\r",
													"\t\t\teverythingVerified = true;\r",
													"\r",
													"\t\t});\r",
													"\t});\r",
													"\r",
													"\tpm.expect(everythingVerified, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5cdc0ba6-f3d1-4c97-af0d-22a773f91a9a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StudentEducationOrganizationAssociationCollectionWithProperty/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"StudentEducationOrganizationAssociationCollectionWithProperty",
												""
											]
										},
										"description": "Scenario: Composite is requested for a Student to check the order of the response properties\r\n    Given the subject of the request is a StudentEducationOrganizationAssociation\r\n    When a GET (by id) request is submitted to the \"StudentEducationOrganizationAssociationCollectionWithProperty\" composite\r\n    Then the response model at path \"studentEducationOrganizationAssociationAddresses[0]\" should only have the specific members [addressTypeDescriptor, streetNumberName, city, stateAbbreviationDescriptor, postalCode] in that order"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Feature: Composites support short description",
					"item": [
						{
							"name": "Initialize Known Data",
							"item": [
								{
									"name": "Initialize Known StudentSchoolAssociations  Data for Get Requests",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dc7258e-ec89-496e-addf-d59eb76786d3",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"const responseItems = pm.response.json();\r",
													"\r",
													"const studentSchoolAssociationList = __.map(responseItems, studentSchoolAssociation => {\r",
													"\treturn {\r",
													"\t\tstudentGuid: studentSchoolAssociation.studentReference.link.href.split(\"/\").pop()\r",
													"\t};\r",
													"});\r",
													"\r",
													"pm.environment.set('known:studentGuid', __.first(studentSchoolAssociationList)[\"studentGuid\"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/data/v3/ed-fi/StudentSchoolAssociations",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"data",
												"v3",
												"ed-fi",
												"StudentSchoolAssociations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Edfi types use short description Scenario",
							"item": [
								{
									"name": "Edfi types use short description",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b839198e-2ea2-4815-a3fd-67893eed578b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bcf07a02-dd0b-4191-ab58-03dfe49bfa78",
												"exec": [
													"const __ = require('lodash');\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"\tpm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Should return item with the short description in [Alternative,Regular,Special Education,Career and Technical Education] for property schoolType \", () => {\r",
													"\r",
													"\tconst responseItems = pm.response.json();\r",
													"\tlet isschoolTypeDescriptorValueExist = false;\r",
													"\r",
													"\t__.each(responseItems, responseItem => {\r",
													"\t\tlet properties = Object.keys(responseItem);\r",
													"\t\tpm.expect(properties).to.have.members(['studentSchoolAssociations']);\r",
													"\r",
													"\t\t__.each(responseItem.studentSchoolAssociations, studentSchoolAssociation => {\r",
													"\t\t\tlet properties = Object.keys(studentSchoolAssociation);\r",
													"\t\t\tpm.expect(properties).to.have.members(['schoolReference']);\r",
													"\r",
													"\t\t\tconst schoolTypeDescriptors = [\"Alternative\", \"Regular\", \"Special Education\", \"Career\", \"Technical Education\"];\r",
													"\t\t\tproperties = Object.keys(studentSchoolAssociation.schoolReference);\r",
													"\t\t\tpm.expect(properties).to.have.members(['schoolTypeDescriptor']);\r",
													"\r",
													"\t\t\tproperties = Object.values(studentSchoolAssociation.schoolReference);\r",
													"\t\t\tconst schoolTypeDescriptorValue = properties[0].split(\"#\").pop();\r",
													"\t\t\tif (schoolTypeDescriptors.indexOf(schoolTypeDescriptorValue) != -1) {\r",
													"\t\t\t\tisschoolTypeDescriptorValueExist = true;\r",
													"\t\t\t}\r",
													"\t\t});\r",
													"\t});\r",
													"\t\r",
													"\tpm.expect(isschoolTypeDescriptorValueExist, \"Test data was insufficient to verify expected behavior.\").to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/EdfiShortDescription/",
											"host": [
												"{{ApiBaseUrl}}"
											],
											"path": [
												"composites",
												"v1",
												"ed-fi",
												"test",
												"EdfiShortDescription",
												""
											]
										},
										"description": "Scenario: Edfi types use short description\r\n    Given the subject of the request is a student with a StudentSchoolAssociation\r\n    When a GET (by id) request is submitted to the \"EdfiShortDescription\" composite\r\n    Then the response model should use the short description in [Alternative,Regular,Special Education,Career and Technical Education] for property schoolType"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Descriptor sub-properties in Composites",
			"item": [
				{
					"name": "Get Request for StaffWithReferencedDescriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c3a2d54-f476-41c4-ba01-4dda359ae850",
								"exec": [
									"const __ = require('lodash');",
									"",
									"const responseItems = pm.response.json();",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Should return some data for verification\", () => {",
									"     const responseItems = pm.response.json();     ",
									"     pm.expect(responseItems.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Should return StaffWithReferencedDescriptor has all properties ['id', 'staffUniqueId', 'sexDescriptorUri', 'sexDescriptorNamespace', 'sexDescriptorCodeValue','sexDescriptorShortDescription','personId','sourceSystemDescriptorNamespace','sourceSystemDescriptorCodeValue','sourceSystemDescriptorShortDescription','electronicMails','electronicMailsWithFlattenedDescriptors','sexDescriptor','personReference']\", () => {",
									"     __.each(responseItems, (responseItem) => {",
									"        const properties = Object.keys(responseItem); ",
									"        pm.expect(properties).to.have.members([\"id\", \"staffUniqueId\", \"sexDescriptorUri\", \"sexDescriptorNamespace\", \"sexDescriptorCodeValue\",'sexDescriptorShortDescription','personId',",
									"         'sourceSystemDescriptorNamespace','sourceSystemDescriptorCodeValue','sourceSystemDescriptorShortDescription','electronicMails','electronicMailsWithFlattenedDescriptors','sexDescriptor','personReference']);",
									"     });    ",
									"});",
									"",
									"pm.test(\"Should return direct descriptor reference\", () => {",
									"     __.each(responseItems, (responseItem) => {",
									"        const properties = Object.keys(responseItem.sexDescriptor);         ",
									"        pm.expect(properties).to.have.members([\"namespace\", \"codeValue\"]);        ",
									"     });    ",
									"});",
									"",
									"pm.test(\"Should return direct descriptor reference with properties flattened\", () => {",
									"   __.each(responseItems, (responseItem) => {",
									"        const properties = Object.keys(responseItem); ",
									"        pm.expect(properties).to.contains.members(['sexDescriptorUri','sexDescriptorNamespace','sexDescriptorCodeValue','sexDescriptorShortDescription']);",
									"     });  ",
									"});",
									"",
									"pm.test(\"Should return descriptor reference from child reference\", () => {",
									"       __.each(responseItems, (responseItem) => {",
									"        let properties = Object.keys(responseItem.personReference);         ",
									"        pm.expect(properties).to.have.members([\"personId\", \"sourceSystemDescriptor\"]);   ",
									"        properties = Object.keys(responseItem.personReference.sourceSystemDescriptor);           ",
									"        pm.expect(properties).to.have.members([\"namespace\", \"codeValue\",\"shortDescription\"]);   ",
									"     });   ",
									"});",
									"",
									"pm.test(\"Should return descriptor reference from child reference with properties flattened\", () => {",
									"     __.each(responseItems, (responseItem) => {",
									"        const properties = Object.keys(responseItem); ",
									"        pm.expect(properties).to.contains.members(['personId','sourceSystemDescriptorNamespace','sourceSystemDescriptorCodeValue','sourceSystemDescriptorShortDescription']);",
									"     });   ",
									"});",
									"",
									"pm.test(\"Should return descriptor reference on child collection reference\", () => {",
									"     __.each(responseItems, (responseItem) => {",
									"         __.each(responseItem.electronicMails, (electronicMail) => {",
									"                let properties = Object.keys(electronicMail); ",
									"                pm.expect(properties).to.contains.members(['electronicMailAddress','electronicMailTypeDescriptor']);",
									"                properties = Object.keys(electronicMail.electronicMailTypeDescriptor);                 ",
									"                pm.expect(properties).to.contains.members(['namespace','codeValue']);",
									"         });        ",
									"     });  ",
									"});",
									"",
									"pm.test(\"Should return descriptor reference on child collection reference with properties flattened\", () => {",
									"     __.each(responseItems, (responseItem) => {",
									"         __.each(responseItem.electronicMailsWithFlattenedDescriptors, (electronicMailsWithFlattenedDescriptor) => {",
									"                let properties = Object.keys(electronicMailsWithFlattenedDescriptor); ",
									"                pm.expect(properties).to.contains.members(['electronicMailAddress','electronicMailTypeNamespace','electronicMailTypeCodeValue']);               ",
									"         });        ",
									"     });  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ApiBaseUrl}}/composites/v1/ed-fi/test/StaffWithReferencedDescriptors?limit=1",
							"host": [
								"{{ApiBaseUrl}}"
							],
							"path": [
								"composites",
								"v1",
								"ed-fi",
								"test",
								"StaffWithReferencedDescriptors"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4989b9f4-62aa-46c2-9682-d3a4d1ad6cd3",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://marcin-chwedczuk.github.io/automatically-generate-new-oauth2-tokens-when-using-postman",
					"// Assumes Environment with Environment Variables: ApiBaseUrl, ApiKey, ApiSecret",
					"// See https://gist.github.com/blmeyers/21138bbe6f80b8c35701a8754bfe59d5 for an environment sample for Local (NOTE: environment variable names have been changed from the gist -- you must adjust accordingly)",
					"// Handles auto refreshing based on provided expiration, but doesn't handle the token being revoked early",
					"// If stuck with \"Bad Token\" or \"Not Authenticated\", just delete the Token or TokenExpiry variables to force a new token",
					"let tokenExpiration = pm.environment.get('TokenExpiry');",
					"let currentToken = pm.environment.get('AccessToken');",
					"let  getToken = true;",
					"if (!tokenExpiration || ",
					"    !currentToken) {",
					"    console.log('Token or expiry date are missing, retrieving new token')",
					"} else if (tokenExpiration <= (new Date()).getTime()) {",
					"    console.log('Token is expired, retrieving new token')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiration date are still valid');",
					"}",
					"if (getToken === true) {",
					"    let tokenUrl = pm.environment.get('ApiBaseUrl') + '/oauth/token';",
					"    let clientId = pm.environment.get('ApiKey_255901');",
					"    let clientSecret = pm.environment.get('ApiSecret_255901');",
					"    let grantType = 'client_credentials';",
					"    ",
					"    let getTokenRequest = {",
					"        method: 'POST',",
					"        url: tokenUrl,",
					"        auth: {",
					"            type: \"basic\",",
					"            basic: [",
					"                { key: \"username\", value: clientId },",
					"                { key: \"password\", value: clientSecret }",
					"            ]",
					"        },",
					"         header: [",
					"            \"content-type:application/x-www-form-urlencoded\"",
					"        ],",
					"        body: {",
					"            mode: \"urlencoded\",",
					"            urlencoded: [{key: \"grant_type\", value: grantType}]",
					"       }",
					"    };",
					"    ",
					"    pm.sendRequest(getTokenRequest, (err, response) => {",
					"        let jsonResponse = response.json(),",
					"            newAccessToken = jsonResponse.access_token;",
					"    ",
					"        console.log({ err, jsonResponse, newAccessToken })",
					"    ",
					"        pm.environment.set(\"AccessToken\", newAccessToken);",
					"    ",
					"        let expiryDate = new Date();",
					"        expiryDate.setSeconds(expiryDate.getSeconds() + jsonResponse.expires_in);",
					"        pm.environment.set('TokenExpiry', expiryDate.getTime());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bff904d5-07e0-4398-ba35-8b0878321e3a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}